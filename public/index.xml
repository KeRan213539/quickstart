<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nacos</title>
    <link>/</link>
    <description>Recent content on Nacos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install Admin Console</title>
      <link>/docs/v2.7/admin/install/admin-console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/install/admin-console/</guid>
      <description>The current version of dubbo admin is under development, including: route rule, dynamic configuration, access control, weight adjustment, load balance, etc.
Install:
git clone https://github.com/apache/dubbo-admin.git /var/tmp/dubbo-admin cd /var/tmp/dubbo-admin mvn clean package Configuration 1:
configuration file： dubbo-admin-backend/src/main/resources/application.properties configurations： dubbo.registry.address=zookeeper://127.0.0.1:2181 Start:
mvn --projects dubbo-admin-backend spring-boot:run For more information, please visit:
https://github.com/apache/dubbo-admin Visit [^2]:
http://127.0.0.1:8080   There&amp;rsquo;s no login for current version, will be added later &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>Background</title>
      <link>/docs/v2.7/user/preface/background/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/preface/background/</guid>
      <description>Background With the fast development of Internet, the scale of web applications expands unceasingly, and finally we find that the traditional vertical architecture(monolithic) can not handle this any more. Distributed service architecture and the flow computing architecture are imperative, and a governance system is urgently needed to ensure an orderly evolution of the architecture.
Monolithic architecture When the traffic is very low, there is only one application, all the features are deployed together to reduce the deployment node and cost.</description>
    </item>
    
    <item>
      <title>Source Code Build</title>
      <link>/docs/v2.7/dev/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/build/</guid>
      <description>Checkout checkout the lastest project source code with commands blow:
git clone https://github.com/apache/dubbo.git dubbo Branches We use master as the major branch for new feature development, and use other branches for maintenance. Tags for all versions can be checked via https://github.com/apache/dubbo/tags.
Building Dubbo relies on maven as the building tool.
Requirements:
 Java above 1.5 version Maven version 2.2.1 or above  The following MAVEN_OPTSshould be configured before building:
export MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m build with below command:</description>
    </item>
    
    <item>
      <title>Apache Committer Guide</title>
      <link>/docs/contribution-guidelines/committer/new-committer-guide_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/committer/new-committer-guide_dev/</guid>
      <description>First: How to become a committer Initial committers at the project incubator stage At the project incubator stage, there will be an initial committers list in the proposal of the incubator project. Confirm that you are one of the initial committers. After the vote is passed in the Apache incubator community, these committers can start preparing their account. See incubator wiki for details.
The active contributor is elected as a committer At the late development stage, an active contributor can be elected as a committer.</description>
    </item>
    
    <item>
      <title>The Devil Is In The Details</title>
      <link>/docs/v2.7/dev/principals/code-detail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/principals/code-detail/</guid>
      <description>http://javatar.iteye.com/blog/1056664
 Recently, I have been worried about the quality of the Dubbo distributed service framework. If there are more maintenance personnel or changes, there will be a decline in quality. I am thinking, is there any need for everyone to abide by it, according to a habit when writing code, I have summarized it. The code process, especially the framework code, should always keep in mind the details. Maybe the following will be said, everyone will feel very simple, very basic, but always keep in mind.</description>
    </item>
    
    <item>
      <title>dubbo protocol</title>
      <link>/docs/v2.7/user/references/protocol/dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/protocol/dubbo/</guid>
      <description>Dubbo protocol which is the default protocol of Dubbo RPC Framework uses a single long connection and NIO asynchronous communication,it is suitable for small data but with high concurrency RPC call and the number of consumer machine is much greater than provider
On the other hand, the Dubbo protocol is not suitable for transmitting large amounts of data, such as file transmission, video transmission, etc., unless the request is very low.</description>
    </item>
    
    <item>
      <title>dubbo:application</title>
      <link>/docs/v2.7/user/references/xml/dubbo-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-application/</guid>
      <description>Application configuration. The corresponding class: org.apache.dubbo.config.ApplicationConfig
   Property Corresponding URL parameter Type Requisite Default Effect Description Compatibility     name application string Y  service governance Application name is the unique identifier of an application. It is for registry combing the dependencies of applications. Note: Consumer and provider application name should not be the same, and this parameter is not a match condition. As a suggestion, you can name it as your project name.</description>
    </item>
    
    <item>
      <title>dubbo:argument</title>
      <link>/docs/v2.7/user/references/xml/dubbo-argument/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-argument/</guid>
      <description>Method argument configuration. The corresponding class：org.apache.dubbo.config.ArgumentConfig. This tag is child of &amp;lt;dubbo:method&amp;gt;, which is for feature description of method argument, such as:
&amp;lt;dubbo:method name=&amp;#34;findXxx&amp;#34; timeout=&amp;#34;3000&amp;#34; retries=&amp;#34;2&amp;#34;&amp;gt; &amp;lt;dubbo:argument index=&amp;#34;0&amp;#34; callback=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;/dubbo:method&amp;gt;    Property Corresponding URL parameter Type Requisite Default Effect Description Compatibility     index  int Y  identification method name above 2.0.6   type  String Index and type choose one  identification Find index of argument by it above 2.</description>
    </item>
    
    <item>
      <title>dubbo:config-center</title>
      <link>/docs/v2.7/user/references/xml/dubbo-config-center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-config-center/</guid>
      <description>Configuration center. Corresponding configuration class: org.apache.dubbo.config.ConfigCenterConfig
   property Corresponding URL parameter type required default value description compatibility     protocol config.protocol string optional zookeeper Which configuration center to use: apollo, zookeeper, nacos, etc.
take zookeeper for example
1. If protocol is specified, address can be simplified to 127.0.0.1:2181;
2. If protocol is not specified, address is set to zookeeper://127.0.0.1:2181 2.7.0+   address config.address string required  Configuration center address.</description>
    </item>
    
    <item>
      <title>dubbo:consumer</title>
      <link>/docs/v2.7/user/references/xml/dubbo-consumer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-consumer/</guid>
      <description>Consumer default configuration. The corresponding clas： org.apache.dubbo.config.ConsumerConfig. It is also default configuration of &amp;lt;dubbo:reference&amp;gt;.
   Property Corresponding URL parameter Type Requisite Default Effect Description Compatibility     timeout default.timeout int N 1000 performance optimization invoking timeout(ms) above 1.0.16   retries default.retries int N 2 performance optimization Invoking retry times, exclude the first invoking. Set 0 to disable it.Only valid if the cluster&amp;rsquo;s value is failback/failover above 1.</description>
    </item>
    
    <item>
      <title>dubbo:method</title>
      <link>/docs/v2.7/user/references/xml/dubbo-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-method/</guid>
      <description>Method level configuration. The corresponding class: org.apache.dubbo.config.MethodConfig. This tag is a child tag of &amp;lt;dubbo:service&amp;gt; or &amp;lt;dubbo:reference&amp;gt;, for accuracy to method level.
   Property Corresponding URL parameter Type Requisite Default Effect Description Compatibility     name  string Y  identifier Method name above 1.0.8   timeout &amp;lt;metodName&amp;gt;.timeout int N &amp;lt;dubbo:reference&amp;gt; timeout performance optimization Method call timeout(ms) above 1.0.8   retries &amp;lt;metodName&amp;gt;.retries int N &amp;lt;dubbo:reference&amp;gt; retries performance optimization Invoking retry times, exclude the first invoking.</description>
    </item>
    
    <item>
      <title>dubbo:module</title>
      <link>/docs/v2.7/user/references/xml/dubbo-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-module/</guid>
      <description>Module configuration. The corresponding class org.apache.dubbo.config.ModuleConfig
   Property The corresponding class Type Requisite Default Effect Description Compatibility     name module string Y  service governance Module name is for registry combing the dependencies of modules. above 2.2.0   version module.version string N  service governance module version above 2.2.0   owner owner string N  service governance Module manager, Pls. fill in the mailbox prefix of the person in charge above 2.</description>
    </item>
    
    <item>
      <title>dubbo:monitor</title>
      <link>/docs/v2.7/user/references/xml/dubbo-monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-monitor/</guid>
      <description>Monitor center configuration. The corresponding class: org.apache.dubbo.config.MonitorConfig
   Property The corresponding class Type Requisite Default Effect Description Compatibility     protocol protocol string N dubbo service governance Monitor center protocol. &amp;ldquo;registry&amp;rdquo; means looking up monitor center from registry. Others mean communicating to monitor center directly above 2.0.9   address &amp;lt;url&amp;gt; string N N/A service governance Communicating to monitor center directly. address=&amp;ldquo;10.20.130.230:12080&amp;rdquo; above 1.0.16    </description>
    </item>
    
    <item>
      <title>dubbo:parameter</title>
      <link>/docs/v2.7/user/references/xml/dubbo-parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-parameter/</guid>
      <description>Optional parameter configuration. The corresponding class is java.util.Map. This tag is used as a sub tag to configure custom parameters for extending &amp;lt;dubbo:protocol&amp;gt;, &amp;lt;dubbo:service&amp;gt;, &amp;lt;dubbo:provider&amp;gt;, &amp;lt;dubbo:reference&amp;gt; or &amp;lt;dubbo:consumer&amp;gt;.
   Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility     key key string True  Service governance routing parameter key Above 2.0.0   value value string True  Service governance routing parameter value Above 2.</description>
    </item>
    
    <item>
      <title>dubbo:protocol</title>
      <link>/docs/v2.7/user/references/xml/dubbo-protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-protocol/</guid>
      <description>Service provider protocol configuration. The corresponding class is org.apache.dubbo.config.ProtocolConfig. If you need to support multiple protocols, you could declare multiple &amp;lt;dubbo:protocol&amp;gt; tags, and specify the protocol via protocol property.
   Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility     id  string False dubbo Configuration association Bean Id of the protocol, can be referenced in &amp;lt;dubbo:service protocol=&amp;quot;&amp;quot;&amp;gt; The default value is equal to the value of name attribute while id is not filled.</description>
    </item>
    
    <item>
      <title>dubbo:provider</title>
      <link>/docs/v2.7/user/references/xml/dubbo-provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-provider/</guid>
      <description>The default configuration of service provider. The corresponding class is org.apache.dubbo.config.ProviderConfig. This tag provider default values for &amp;lt;dubbo:service&amp;gt; and &amp;lt;dubbo:protocol&amp;gt;.
   Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility     id  string False dubbo Configuration association Bean Id of the protocol, can be referenced in &amp;lt;dubbo:service proivder=&amp;quot;&amp;quot;&amp;gt; Above 1.0.16   protocol &amp;lt;protocol&amp;gt; string False dubbo Performance optimize Protocol name Above 1.</description>
    </item>
    
    <item>
      <title>dubbo:reference</title>
      <link>/docs/v2.7/user/references/xml/dubbo-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-reference/</guid>
      <description>The configuration of service consumer. The corresponding class isorg.apache.dubbo.config.ReferenceConfig
   Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility     id  string True  Configuration association Bean Id of the service reference Above 1.0.0   interface  class True  Service discovery Interface name of the service Above 1.0.0   version version string False  Service discovery Service version, must be equal to the provider&amp;rsquo;s version Above 1.</description>
    </item>
    
    <item>
      <title>dubbo:registry</title>
      <link>/docs/v2.7/user/references/xml/dubbo-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-registry/</guid>
      <description>The configuration of the registry center. The corresponding class is org.apache.dubbo.config.RegistryConfig. If you have multiple different registries, you can declare multiple &amp;lt;dubbo:registry&amp;gt; tags, and then reference specified registry with registry property in &amp;lt;dubbo:service&amp;gt; or &amp;lt;dubbo:reference&amp;gt; tag.
   Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility     id  string False  Configuration association Bean Id of the registry center, can be referenced in &amp;lt;dubbo:service registry=&amp;quot;&amp;quot;&amp;gt;or &amp;lt;dubbo:reference registry=&amp;quot;&amp;quot;&amp;gt; Above 1.</description>
    </item>
    
    <item>
      <title>dubbo:service</title>
      <link>/docs/v2.7/user/references/xml/dubbo-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/xml/dubbo-service/</guid>
      <description>The configuration of the service provider. The corresponding class is org.apache.dubbo.config.ServiceConfig.
   Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility     interface  class True  Service discovery The service interface name Above 1.0.0   ref  object True  Service discovery The reference to the service implementation Above 1.0.0   version version string False 0.0.0 Service discovery Service version. It&amp;rsquo;s recommended to use 2 digitals such as 1.</description>
    </item>
    
    <item>
      <title>Dubbo Admin Functions</title>
      <link>/docs/v2.7/admin/ops/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/ops/functions/</guid>
      <description>Page search If you need to manage a Dubbo service, you need to search it first and open it&amp;rsquo;s management page
Service provider page Service consumer page Add route rule page Add dynamic configuration page </description>
    </item>
    
    <item>
      <title>How to become a Dubbo committer</title>
      <link>/docs/contribution-guidelines/contributor/become-a-committer_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/contributor/become-a-committer_dev/</guid>
      <description>Anyone can be a contributor to an Apache project. Being a contributor simply means that you take an interest in the project and contribute in some way, ranging from asking sensible questions (which documents the project and provides feedback to developers) through to providing new features as patches.
If you become a valuable contributor to the project you may well be invited to become a committer. Committer is a term used at the ASF to signify someone who is committed to a particular project.</description>
    </item>
    
    <item>
      <title>Nacos Registry Center</title>
      <link>/docs/v2.7/user/references/registry/nacos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/registry/nacos/</guid>
      <description>Nacos is a very important registry center for Dubbo ecosystem, dubbo-registry-nacos is the implementation of Nacos integration to Nacos.
Prepare Work When you integrate dubbo-registry-nacos into your Dubbo project, please Make sure the Nacos service is started in the background. If you are not familiar with the basic use of Nacos, you can refer to Nacos Quick Start. It is recommended to use the version equal or above Nacos 1.0.0.</description>
    </item>
    
    <item>
      <title>Preflight Check</title>
      <link>/docs/v2.7/user/examples/preflight-check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/preflight-check/</guid>
      <description>By default dubbo will check if the dependent service is available at startup . It will throw an exception to prevent Spring complete initialization when it is not available, so that you can find the problems early before publishing you application, the default setting: check=true.
You can turn off checking by check=false. For example, some services do not care it when you run testing, or you must have one started firstly because of circular dependency.</description>
    </item>
    
    <item>
      <title>Protocol Extension</title>
      <link>/docs/v2.7/dev/impls/protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/protocol/</guid>
      <description>Summary Extension to RPC protocol, hide details of remote call.
Contract:
 When user calls invoke() method of Invoker object which&amp;rsquo;s returned from refer() call, the protocol needs to correspondingly execute invoke() method of Invoker object passed from remote export() method associated with the same URL. Moreover, it&amp;rsquo;s protocol&amp;rsquo;s responsibility to implement Invoker which&amp;rsquo;s returned from refer(). Generally speaking, protocol sends remote request in the Invoker implementation, but needs not to care about the Invoker passed into export() since the framework will implement the logic and pass in the instance.</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>/docs/v2.7/user/languages/erlang/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/languages/erlang/quick-start/</guid>
      <description>We recommend using java to define the Dubbo interface. And use erlanalysis tool parse java interface transfer to erlang lib.
Import Dependency Lib Using Rebar Build Tool Add dubblerl to rebar.config with your project
{deps, [ {dubboerl, {git, &amp;#34;https://github.com/apache/dubbo-erlang.git&amp;#34;, {branch, &amp;#34;master&amp;#34;}}} ]}. User erlang.mk Build Tool Waiting for improvement
Import interface lib Suppose the interface lib you exported is called dubbo_service.
 If you didn&amp;rsquo;t upload your lib to your git repository, It is recommended that you copy the dubbo_service lib into the project&amp;rsquo;s apps directory.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>/docs/v2.7/user/preface/requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/preface/requirements/</guid>
      <description>Requirements Before the advent of large-scale services, an application might just exposes or references remote service by using RMI or Hessian, the call is done by configuring service URL, and load balance is done through hardwares, like F5.
When there are more and more services, it becomes very difficult to configure the service URL, the single point pressure of F5 hardware load balancer is also increasing. At this point, a service registry is needed to dynamically register and discover services to make the service&amp;rsquo;s location transparent.</description>
    </item>
    
    <item>
      <title>XML Configuration</title>
      <link>/docs/v2.7/user/configuration/xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/configuration/xml/</guid>
      <description>About the XML configuration items, see：XML References. If you prefer use API directly instead of using Spring, see API Configuration. Want an example of how to use configuration, see Quick Start.
 provider.xml demo &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;dubbo:application name=&amp;#34;hello-world-app&amp;#34; /&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;multicast://224.5.6.7:1234&amp;#34; /&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; port=&amp;#34;20880&amp;#34; /&amp;gt; &amp;lt;dubbo:service interface=&amp;#34;org.apache.dubbo.demo.DemoService&amp;#34; ref=&amp;#34;demoServiceLocal&amp;#34; /&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;demoServiceRemote&amp;#34; interface=&amp;#34;org.apache.dubbo.demo.DemoService&amp;#34; /&amp;gt; &amp;lt;/beans&amp;gt; All tags support custom parameters, so we can meet the special config requirements at different extension points, such as:</description>
    </item>
    
    <item>
      <title>Zookeeper Registry Server</title>
      <link>/docs/v2.7/user/references/registry/zookeeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/registry/zookeeper/</guid>
      <description>Zookeeper is the child project of apache hadoop. Since it offers tree-like directory service and supports change notification, it&amp;rsquo;s suitable to use it as dubbo&amp;rsquo;s registry server. It&amp;rsquo;s a field-proven product, therefore it&amp;rsquo;s recommended to use it in the production environment. 1
Description on registration procedure:
 When service provider boots up: write service URL address under directory /dubbo/com.foo.BarService/providers When service consumer boots up: subscribe to /dubbo/com.foo.BarService/providers for provider&amp;rsquo;s URL addresses.</description>
    </item>
    
    <item>
      <title>CLA Signing Guide</title>
      <link>/docs/contribution-guidelines/contributor/cla-signing-guide_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/contributor/cla-signing-guide_dev/</guid>
      <description>You are required to sign the Apache ICLA under the following condition:
 You have made lots of contribution to Dubbo before Dubbo get donated to Apache, and you haven&amp;rsquo;t sign the Alibaba-CLA before. You have made lots of contribution to Dubbo, and you are invited to become committer of Dubbo, and you have not signed Alibaba-CLA or Apache ICLA before.  Steps  Download this pdf Fill in the necessary blanks Print it out Sign the printed file Scan it Send an email to secretary@apache.</description>
    </item>
    
    <item>
      <title>The Configuration Design</title>
      <link>/docs/v2.7/dev/principals/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/principals/configuration/</guid>
      <description>http://javatar.iteye.com/blog/949527
 Dubbo design is now completely unobtrusive, namely the user only depends on the configuration of contract.After multiple versions of the development, in order to meet the demand of various scenarios, configuration is more and more.In order to maintain compatibility with only grow, lurking inside all sorts of styles, convention, rules.The new version will also be configured for a adjustment, remove the dubbo, properties, instead of all the spring configuration.</description>
    </item>
    
    <item>
      <title>Consumer Configuration</title>
      <link>/docs/v2.7/user/languages/erlang/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/languages/erlang/reference/</guid>
      <description>Base Config Consumer config is under the dubboerl application with sys.config
{dubboerl,[ %% other config ... 	{consumer,[ {&amp;lt;&amp;lt;&amp;#34;interface fullname&amp;#34;&amp;gt;&amp;gt;,[Option]}, %% eg: 	{&amp;lt;&amp;lt;&amp;#34;org.apache.dubbo.erlang.sample.service.facade.UserOperator&amp;#34;&amp;gt;&amp;gt;,[]}, ]} ]} Option is to be added.</description>
    </item>
    
    <item>
      <title>Install Demo Provider</title>
      <link>/docs/v2.7/admin/install/provider-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/install/provider-demo/</guid>
      <description>install:
$ git clone https://github.com/apache/dubbo.git $ cd dubbo/dubbo-demo/dubbo-demo-xml # run org.apache.dubbo.demo.provider.Application under dubbo-demo-xml-provider module # add -Djava.net.preferIPv4Stack=true if your IDE is Intellij Idea configuration:
# resources/spring/dubbo-provider.xml # change dubbo:registry to a real registry server address, zookeeper is recommended, for example: # &amp;lt;dubbo:registry address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; </description>
    </item>
    
    <item>
      <title>Framework Design</title>
      <link>/docs/v2.7/dev/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/design/</guid>
      <description>Overall design Image description:
 Left area with light blue background shows service consumer interfaces, Right area with light green background shows service provider interfaces, center area shows both side interfaces. The image is divided into 10 layers from the bottom to the top, and the layers are one-way dependence. The black arrow on the right represents the dependency between layers, and each layer can be stripped from the upper layer to be reused, the Service and Config layers are API, and the other layers are SPI.</description>
    </item>
    
    <item>
      <title>Fault Tolerance Strategy</title>
      <link>/docs/v2.7/user/examples/fault-tolerent-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/fault-tolerent-strategy/</guid>
      <description>Dubbo offers a variety of fault-tolerant scenarios when a cluster call fails, with a default failover retry.
The relationship between nodes:
 This Invoker is the callable Service&amp;rsquo;s abstract of the Provider, and the Invoker packaging the Provider&amp;rsquo;s address and Service&amp;rsquo;s interface. The Directory represent multiple Invoker,You can think of it as List&amp;lt;Invoker&amp;gt;,But unlike List,its value can be dynamically changing.such as registry push changes The Cluster disguises multiple Invoker in Directory as a Invoker,The upper transparent, masquerade process contains fault-tolerant logic, call failed, try another The Router is responsible for selecting subsets according to routing rules from multiple Invokers, such as read-write separation, application isolation, etc.</description>
    </item>
    
    <item>
      <title>Filter Extension</title>
      <link>/docs/v2.7/dev/impls/filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/filter/</guid>
      <description>Summary Extension for intercepting the invocation for both service provider and consumer, furthermore, most of functions in dubbo are implemented base on the same mechanism. Since every time when remote method is invoked, the filter extensions will be executed too, the corresponding penalty should be considered before more filters are added.
Contract:
 User defined filters are executed after built-in filters by default. Special value default is introduced to represent the default extension location.</description>
    </item>
    
    <item>
      <title>Dubbo Admin Introductions</title>
      <link>/docs/v2.7/admin/ops/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/ops/introduction/</guid>
      <description>Now version 0.1 has been released, frontend uses Vue and Vuetify as javascript framework and UI framework, backend uses spring framework, you can deploy the whole project with maven or deploy frontend and backend separately.
Deploy the whole project through maven  install  git clone https://github.com/apache/dubbo-admin.git cd dubbo-admin mvn clean package cd dubbo-admin-distribution/target java -jar dubbo-admin-0.1.jar  visit
http://localhost:8080  Deploy frontend and backend separately  frontend deploy  cd dubbo-admin-ui npm install npm run dev  backend deploy  cd dubbo-admin-server mvn clean package cd target java -jar dubbo-admin-server-0.</description>
    </item>
    
    <item>
      <title>Multicast Registry</title>
      <link>/docs/v2.7/user/references/registry/multicast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/registry/multicast/</guid>
      <description>Multicast registry doesn&amp;rsquo;t require to setup any central node. Just like IP address broadcast, dubbo service providers and consumers can discover each other through this mechanism.
Service provider broadcasts its address when it boots up. Service consumer broadcasts its subscription request when it boots up. Once service provider receives subscription request, it unicasts its own address to the corresponding consumer, if unicast=false is set, then broadcast will be used instead. When service consumer receives provider&amp;rsquo;s address, it can start RPC invocation on the received address.</description>
    </item>
    
    <item>
      <title>New Contributor Guide</title>
      <link>/docs/contribution-guidelines/contributor/new-contributor-guide_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/contributor/new-contributor-guide_dev/</guid>
      <description>This is a guide for new comers who wants to contribute to Dubbo.
Subscribe to the mailing list The mailing list is the recommended way for discussing almost anything that related to Dubbo. Please refer to this issue for detailed documentation on how to subscribe.
To subscribe to the following mailing list, please refer to Mailing list subscription guide
 dev@dubbo.apache.org: the develop mailing list, you can ask question here if you have encountered any problem when using or developing Dubbo.</description>
    </item>
    
    <item>
      <title>Properties Configuration</title>
      <link>/docs/v2.7/user/configuration/properties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/configuration/properties/</guid>
      <description>If your application is simple enough, say, you do not need multi-registries or multi-protocols, and you want to share configuration among Spring containers. You can use dubbo.properties as default configuration.
Dubbo will load dubbo.properties under the root of classpath automatically, you can also specify the path for loading this file by using JVM parameter: -Ddubbo.properties.file=xxx.properties.
Mapping Rules Combine the tag name and attribute name of the XML tag, use . to split.</description>
    </item>
    
    <item>
      <title>Quick start</title>
      <link>/docs/v2.7/user/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/quick-start/</guid>
      <description>The most common way to use Dubbo is to run it in Spring framework. The following content will guide you to develop a Dubbo application with Spring framework&amp;rsquo;s XML configuration.
If you don&amp;rsquo;t want to rely on Spring, you can try using API configuration.
First let&amp;rsquo;s create a root directory called dubbo-demo:
mkdir dubbo-demo cd dubbo-demo Next, we are going to create 3 sub-directories under root directory:
 dubbo-demo-api: the common service api dubbo-demo-provider: the demo provider codes dubbo-demo-consumer: the demo consumer codes  Service provider Defining service interfaces DemoService.</description>
    </item>
    
    <item>
      <title>Release Guide</title>
      <link>/docs/contribution-guidelines/committer/release-guide_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/committer/release-guide_dev/</guid>
      <description>Understanding the Apache Release Cycle In general, Source Release is the key and the required content of Apache. But Binary Release is optional, Dubbo can choose whether to release binary packages to the Apache repository or to the Maven central repository.
Please refer to the following links for more information on ASF&amp;rsquo;s release guide:
 Apache Release Guide Apache Release Policy Maven Release Info  Preparation of Local Building Environment Mainly including the related preparation of signature utilities and Maven repository certification</description>
    </item>
    
    <item>
      <title>rest protocol</title>
      <link>/docs/v2.7/user/references/protocol/rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/protocol/rest/</guid>
      <description>基于标准的Java REST API——JAX-RS 2.0（Java API for RESTful Web Services的简写）实现的REST调用支持
快速入门 在dubbo中开发一个REST风格的服务会比较简单，下面以一个注册用户的简单服务为例说明。
这个服务要实现的功能是提供如下URL（注：这个URL不是完全符合REST的风格，但是更简单实用）：
http://localhost:8080/users/register 而任何客户端都可以将包含用户信息的JSON字符串POST到以上URL来完成用户注册。
首先，开发服务的接口：
public class UserService { void registerUser(User user); } 然后，开发服务的实现：
@Path(&amp;#34;users&amp;#34;) public class UserServiceImpl implements UserService { @POST @Path(&amp;#34;register&amp;#34;) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user...  } } 上面的实现非常简单，但是由于该 REST 服务是要发布到指定 URL 上，供任意语言的客户端甚至浏览器来访问，所以这里额外添加了几个 JAX-RS 的标准 annotation 来做相关的配置。
@Path(&amp;ldquo;users&amp;rdquo;)：指定访问UserService的URL相对路径是/users，即http://localhost:8080/users
@Path(&amp;ldquo;register&amp;rdquo;)：指定访问registerUser()方法的URL相对路径是/register，再结合上一个@Path为UserService指定的路径，则调用UserService.register()的完整路径为http://localhost:8080/users/register
@POST：指定访问registerUser()用HTTP POST方法
@Consumes({MediaType.APPLICATION_JSON})：指定registerUser()接收JSON格式的数据。REST框架会自动将JSON数据反序列化为User对象
最后，在spring配置文件中添加此服务，即完成所有服务开发工作：
&amp;lt;!-- 用rest协议在8080端口暴露服务 --&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;rest&amp;#34; port=&amp;#34;8080&amp;#34;/&amp;gt; &amp;lt;!-- 声明需要暴露的服务接口 --&amp;gt; &amp;lt;dubbo:service interface=&amp;#34;xxx.</description>
    </item>
    
    <item>
      <title>API Configuration</title>
      <link>/docs/v2.7/user/configuration/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/configuration/api/</guid>
      <description>All API properties have counterparts in XML, see XML References for details. For example ApplicationConfig.setName(&amp;quot;xxx&amp;quot;) equals to &amp;lt;dubbo:application name=&amp;quot;xxx&amp;quot; /&amp;gt; 1
 Provider Side import org.apache.dubbo.rpc.config.ApplicationConfig; import org.apache.dubbo.rpc.config.RegistryConfig; import org.apache.dubbo.rpc.config.ProviderConfig; import org.apache.dubbo.rpc.config.ServiceConfig; import com.xxx.XxxService; import com.xxx.XxxServiceImpl; // Implementation XxxService xxxService = new XxxServiceImpl(); // Application Info ApplicationConfig application = new ApplicationConfig(); application.setName(&amp;#34;xxx&amp;#34;); // Registry Info RegistryConfig registry = new RegistryConfig(); registry.setAddress(&amp;#34;10.20.130.230:9090&amp;#34;); registry.setUsername(&amp;#34;aaa&amp;#34;); registry.setPassword(&amp;#34;bbb&amp;#34;); // Protocol ProtocolConfig protocol = new ProtocolConfig(); protocol.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>/docs/v2.7/user/preface/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/preface/architecture/</guid>
      <description>Specification of Node&amp;rsquo;s Role    Node Role Spec     Provider The provider exposes remote services   Consumer The consumer calls the remote services   Registry The registry is responsible for service discovery and configuration   Monitor The monitor counts the number of service invocations and time-consuming   Container The container manages the services&amp;rsquo;s lifetime    Service relationship Container is responsible for launching, loading, and running the service Provider.</description>
    </item>
    
    <item>
      <title>Install Demo Consumer</title>
      <link>/docs/v2.7/admin/install/consumer-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/install/consumer-demo/</guid>
      <description>Install:
$ git clone https://github.com/apache/dubbo.git $ cd dubbo/dubbo-demo/dubbo-demo-xml # run org.apache.dubbo.demo.consumer.Application under dubbo-demo-xml-consumer module # please start Provider first # add -Djava.net.preferIPv4Stack=true if your IDE is Intellij Idea Configuration:
# resources/spring/dubbo-consumer.xml # change dubbo:registry to the real registry center address, for example: # &amp;lt;dubbo:registry address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; </description>
    </item>
    
    <item>
      <title>Dependencies</title>
      <link>/docs/v2.7/user/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/dependencies/</guid>
      <description>Necessary dependencies JDK 1.6+ 1
Default dependencies use mvn dependency:tree &amp;gt; dep.log command to analysis，Dubbo default depends on the following 3rd party libraries：
[INFO] +- com.alibaba:dubbo:jar:2.5.9-SNAPSHOT:compile [INFO] | +- org.springframework:spring-context:jar:4.3.10.RELEASE:compile [INFO] | +- org.javassist:javassist:jar:3.21.0-GA:compile [INFO] | \- org.jboss.netty:netty:jar:3.2.5.Final:compile All dependencies here are selected for the default configuration of the Dubbo, which are based on stability and performance considerations.
 javassist.jar 2: if &amp;lt;dubbo:provider proxy=&amp;quot;jdk&amp;quot; /&amp;gt; or &amp;lt;dubbo:consumer proxy=&amp;quot;jdk&amp;quot; /&amp;gt;，or &amp;lt;dubbo:application compiler=&amp;quot;jdk&amp;quot; /&amp;gt;， is not required.</description>
    </item>
    
    <item>
      <title> &#34;Fool-proof&#34; Design</title>
      <link>/docs/v2.7/dev/principals/dummy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/principals/dummy/</guid>
      <description>http://javatar.iteye.com/blog/804187
 Recently I was feeling stupid because I solved too many stupid problems. The service framework is becoming more widely used. Every day, I have to help the endpoint user to resolve problems. Gradually, it is found that most of the problems are configuration errors, or duplicated files or classes, or network failure. So I prepare to add some &amp;ldquo;fool-proof&amp;rdquo; design to the further version. It may be very simple, but it is still a little help for troubleshooting speed.</description>
    </item>
    
    <item>
      <title>http protocol</title>
      <link>/docs/v2.7/user/references/protocol/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/protocol/http/</guid>
      <description>Dubbo http protocol is base on HTTP form and Spring&amp;rsquo;s HttpInvoker
Features  Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: form serialization Scope of application: Available browser view, the form or URL can be passed parameters, Temporary files are not supported. Applicable scenarios: Services that need to be available to both application and browser  Constraint  Parameters and return values must be consistent with Bean specifications  Configuration configure http protocol：</description>
    </item>
    
    <item>
      <title>InvokerListener Extension</title>
      <link>/docs/v2.7/dev/impls/invoker-listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/invoker-listener/</guid>
      <description>Summary Fire event when there&amp;rsquo;s any service referenced.
Extension Interface org.apache.dubbo.rpc.InvokerListener
Extension Configuration &amp;lt;!-- 引用服务监听 --&amp;gt; &amp;lt;!-- service reference listener --&amp;gt; &amp;lt;dubbo:reference listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default service reference listener --&amp;gt; &amp;lt;dubbo:consumer listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.rpc.listener.DeprecatedInvokerListener
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxInvokerListener.java (InvokerListener implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.InvokerListener (plain text file with the content: xxx=com.xxx.XxxInvokerListener) XxxInvokerListener.java：
package com.xxx; import org.apache.dubbo.rpc.InvokerListener; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxInvokerListener implements InvokerListener { public void referred(Invoker&amp;lt;?</description>
    </item>
    
    <item>
      <title>Label an Issue</title>
      <link>/docs/contribution-guidelines/committer/label-an-issue-guide_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/committer/label-an-issue-guide_dev/</guid>
      <description>If you are handling an issue, remember to mark the issue cearly with one or more labels whenever you think it&amp;rsquo;s meaningful. With labels on, other developers can easily recognize problems, classify them or track progress.
For issues or pull requests that need coding and further version release to fix, you should always mark it with a milestone.
Some frequently used labels:
  Help Wanted
 help wanted good first issue    Prority</description>
    </item>
    
    <item>
      <title>Load Balance</title>
      <link>/docs/v2.7/user/examples/loadbalance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/loadbalance/</guid>
      <description>Dubbo offers a number of balancing strategies for cluster load balancing, which defaults to random.
You can extend the load balancing strategy by yourself, see: LoadBalance extension
LoadBalance strategy Random LoadBalance  Ramdom, set random probabilities by weight. The probability of collisions on one section is high, but the larger the amount of calls, the more uniform the distribution. And when use weight based on probability the distribution turns out to be uniform, which also helps to dynamically adjust the provider weights.</description>
    </item>
    
    <item>
      <title>Mailing List Subscription Guide</title>
      <link>/docs/contribution-guidelines/contributor/mailing-list-subscription-guide_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/contributor/mailing-list-subscription-guide_dev/</guid>
      <description>The Dubbo developer mailing list (dev@dubbo.apache.org) for Apache Incubator has been established, please feel free to subscribe and refer to [^1] for more details.
You can also view the archive of the mailing list
Here is a brief guide specific to Dubbo:
 Send an email to dev-subscribe@dubbo.apache.org, you can have empty subject and empty content. You will receive an email with the following content:  from: dev-help@dubbo.apache.org reply-to: dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org to: hello@example.</description>
    </item>
    
    <item>
      <title>Provider Configuration</title>
      <link>/docs/v2.7/user/languages/erlang/service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/languages/erlang/service/</guid>
      <description>Base Config Provider config is under the dubboerl application with sys.config
{dubboerl,[ %% other config ... 	{provider,[ {module_implements,interface_module,interface_fullname,[Options]}, %% eg: 	{userOperator_impl,userOperator,&amp;lt;&amp;lt;&amp;#34;org.apache.dubbo.erlang.sample.service.facade.UserOperator&amp;#34;&amp;gt;&amp;gt;,[Option]} ]} ]}    ConfigName Type DefaultValue Remarks     module_implements atom() - The service implements module name   interface_module atom() - Interface module name is transfer form java jar   interface_fullname binary() - Interface full name is the java class name    Option is to be added.</description>
    </item>
    
    <item>
      <title>Redis Registry Server</title>
      <link>/docs/v2.7/user/references/registry/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/registry/redis/</guid>
      <description>Redis Registry Server It is a registry server implementation 1 based on redis 2.
Use key/map structure in redis to save the registration info:
 Main key for service name and type Key in the map is URL address Value in the map is the expiration time. Monitor center uses it to track and remove dirty data 3  Publish/Subscribe events in redis is leveraged for data change notification:
 Distinguish event type with event&amp;rsquo;s value: register, unregister, subscribe, unsubscribe.</description>
    </item>
    
    <item>
      <title>Service Search And Service Detail</title>
      <link>/docs/v2.7/admin/ops/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/ops/search/</guid>
      <description>Service search is the basic function of Dubbo OPS, you can search by service name, application name and IP address, the service name and application name support wildcard and autocomplete:
the service detail page display providers, consumers, medata information is supported in Dubbo 2.7 or higher version:</description>
    </item>
    
    <item>
      <title>SPI Loading</title>
      <link>/docs/v2.7/dev/spi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/spi/</guid>
      <description>SPI Config Source: Dubbo SPI is inherited from standard JDK SPI(Service Provider Interface) and makes it more powerful.
Dubbo fixed below issues of the standard JDK SPI:
 The standard JDK SPI will load and instantize all the implementations at once. It will be a waste of resources if one implementation is timecosted, but never be used. We can&amp;rsquo;t accquire the SPI name, if loading the SPI implementation is failed.For example: standard JDK ScriptEngine, get script type by invoking method getName().</description>
    </item>
    
    <item>
      <title>Service Test</title>
      <link>/docs/v2.7/admin/ops/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/ops/test/</guid>
      <description>please refer to this blog</description>
    </item>
    
    <item>
      <title>Website Guide</title>
      <link>/docs/contribution-guidelines/committer/website-guide_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/committer/website-guide_dev/</guid>
      <description> The website repository of Apache Dubbo is https://github.com/apache/dubbo-website After building the website, it&amp;rsquo;ll be published to dubbo.apache.org automatically, you can also trigger it manually via https://selfserve.apache.org (need to login with Apache account)  </description>
    </item>
    
    <item>
      <title>Annotation Configuration</title>
      <link>/docs/v2.7/user/configuration/annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/configuration/annotation/</guid>
      <description>Requires2.6.3 or higher, click here to view the complete sample
Provider Side k
@Service annotation for exporting @Service public class AnnotationServiceImpl implements AnnotationService { @Override public String sayHello(String name) { return &amp;#34;annotation: hello, &amp;#34; + name; } } Add application sharing configuration # dubbo-provider.properties dubbo.application.name=annotation-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 Spring scan path @Configuration @EnableDubbo(scanBasePackages = &amp;#34;org.apache.dubbo.samples.simple.annotation.impl&amp;#34;) @PropertySource(&amp;#34;classpath:/spring/dubbo-provider.properties&amp;#34;) static public class ProviderConfiguration { } Consumer Side @Reference annotation for reference @Component(&amp;#34;annotationAction&amp;#34;) public class AnnotationAction { @Reference private AnnotationService annotationService; public String doSayHello(String name) { return annotationService.</description>
    </item>
    
    <item>
      <title>API Docs&amp;Test</title>
      <link>/docs/v2.7/admin/ops/apidocs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/ops/apidocs/</guid>
      <description>dubbo api docs Dubbo api documents, test tools, generate documents according to annotations, and provide test functions
Adding some annotations can generate a swagger like document without turning a non web Dubbo project into a web project
How to use?  Dubbo api docs annotation added to method parameters of Dubbo project  Dubbo provider project introduces dubbo-api-docs-core If Dubbo&amp;rsquo;s interface and parameters are a separate jar package project, introduce dubbo-api-docs-annotations Add the annotation @EnableDubboApiDocs to the project startup class (marked with @SpringBootApplication) or configuration class (marked with @Configuration) of the provider project to enable the Dubbo API Docs  In order to avoid increasing the resource consumption in the production environment, it is recommended to create a configuration class to enable Dubbo API Docs, and use it with the @Profile(&amp;ldquo;dev&amp;rdquo;) annotation Of course, Dubbo API Docs consumed a little CPU resources when the project starting and used a little memory for caching.</description>
    </item>
    
    <item>
      <title>install Zookeeper Configuration Center</title>
      <link>/docs/v2.7/admin/install/zookeeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/install/zookeeper/</guid>
      <description>zookeeper register center client version: dubbo-2.3.3 and above1
Dubbo changes nothing of Zookeeper&amp;rsquo;s server side, an original Zookeeper server is fine. All change happens while calling Zookeeper&amp;rsquo;s client side
install:
wget http://archive.apache.org/dist/zookeeper/zookeeper-3.3.3/zookeeper-3.3.3.tar.gz tar zxvf zookeeper-3.3.3.tar.gz cd zookeeper-3.3.3 cp conf/zoo_sample.cfg conf/zoo.cfg configuration:
vi conf/zoo.cfg If cluster is not needed, the content of zoo.cfg is as below 2:
tickTime=2000 initLimit=10 syncLimit=5 dataDir=/home/dubbo/zookeeper-3.3.3/data clientPort=2181 If cluster is needed, the content of zoo.cfg is as below 3:</description>
    </item>
    
    <item>
      <title>Software Donation Guide</title>
      <link>/docs/contribution-guidelines/contributor/software-donation-guide_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/contributor/software-donation-guide_dev/</guid>
      <description>Before you go through this guide, make sure you have confirmed with PMC that a SGA is actually needed.
If you are donating significant amount of code or documentation to Apache Dubbo , you will be required to sign a Software Grant before your code/doc could be merged.
Steps  Download this pdf Print it out Fill in the blanks (see below as an example) Request your boss to sign it Scan it Send an email to secretary@apache.</description>
    </item>
    
    <item>
      <title>ExporterListener Extension</title>
      <link>/docs/v2.7/dev/impls/exporter-listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/exporter-listener/</guid>
      <description>Summary Fire events when there&amp;rsquo;s any service exported.
Extension Interface org.apache.dubbo.rpc.ExporterListener
Extension Configuration &amp;lt;!-- service exporter listener --&amp;gt; &amp;lt;dubbo:service listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default exporter listener for service provider --&amp;gt; &amp;lt;dubbo:provider listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.registry.directory.RegistryExporterListener
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxExporterListener.java (ExporterListener implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ExporterListener (plain text file with the content: xxx=com.xxx.XxxExporterListener) XxxExporterListener.java：
package com.xxx; import org.apache.dubbo.rpc.ExporterListener; import org.apache.dubbo.rpc.Exporter; import org.apache.dubbo.rpc.RpcException; public class XxxExporterListener implements ExporterListener { public void exported(Exporter&amp;lt;?</description>
    </item>
    
    <item>
      <title>Talk About Expansion Of Extension And Incremental Extension</title>
      <link>/docs/v2.7/dev/principals/expansibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/principals/expansibility/</guid>
      <description>http://javatar.iteye.com/blog/690845
 There are more and more products in our platform, the function of the product also more and more.Platform products in order to meet the requirement of each BU and department as well as product line, will surely will be a lot of irrelevant function together, the customer can use selective.In order to compatible with more demand for each product, each framework, are constantly expanding, and we often choose some extension of the extension, namely to old and new function expanded into a general implementation.</description>
    </item>
    
    <item>
      <title>Service Governance And Configuration Management</title>
      <link>/docs/v2.7/admin/ops/governance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/ops/governance/</guid>
      <description>Service governance the basic function of service governance is changing the runtime behaviour and routing logic, to do weight configuration and current limiting:
application level service governance In Dubbo 2.6 or earlier version, all service governance rule are in service scope, if you need to make application scope rule, you need to set the same rule for all services under an application, modify and delete need the same operation, this is very unfriendly.</description>
    </item>
    
    <item>
      <title>hessian protocol</title>
      <link>/docs/v2.7/user/references/protocol/hessian/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/protocol/hessian/</guid>
      <description>Hessian protocol is used for integrate Hessian services, and it use http protocol to communicate and expose services by servlet.Dubbo use Jetty server as default servlet container.
Dubbo&amp;rsquo;s Hessian protocol interoperates with native Hessian services:
 Providers use Dubbo&amp;rsquo;s Hessian protocol to expose services that consumers call directly using standard Hessian interfaces Alternatively, the provider exposes the service using standard Hessian and the consumer calls it using Dubbo&amp;rsquo;s Hessian protocol.  Features  Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: Hessian binary serialization Scope of application: Incoming and outgoing parameter packets are large, the number of providers is more than that of consumers and can transfer files.</description>
    </item>
    
    <item>
      <title>Implementation details</title>
      <link>/docs/v2.7/dev/implementation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/implementation/</guid>
      <description>Initialization details Service parsing Based on META-INF/spring.handlers config in dubbo.jar, Spring calls DubboNamespaceHandler when meeting dubbo namespace.
All Dubbo tags are parsed by DubboBeanDefinitionParser, based on one to one attribute mapping, the XML label is parsed as a Bean object.
Transfer Bean object to URL, and transfer all attributes of Bean to URL parameters when ServiceConfig.export() or ReferenceConfig.get() initialization.
Then pase URL to Protocol extension point, based on Extension point adaptive mechanism of extension point, processing service exposure or reference for different protocols according to URL protocol header.</description>
    </item>
    
    <item>
      <title>Maturity</title>
      <link>/docs/v2.7/user/maturity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/maturity/</guid>
      <description>Function maturity    Feature Maturity Strength Problem Advise User     Concurrency control Tested concurrency control  On trial    Connection control Tested connection number control  On trial    Connecting certain provider straightly Tested Provider service for point-to-point connecting straightly, for test  Can be used in the test environment Alibaba   Grouping polymerization Tested Return value of grouping polymerization, service for menu aggregation and other services Used in special scenes Can be used in the production environment    Parameters validator Tested parameters validator, JSR303 validation framework integration Have effect on Performance On trial LaiWang   Result cache Tested result cache, for accelerating requests  On trial    Generic reference Stable Generic reference, remote call without a business interface class，for test platforms, open api proxy service, and so on  Can be used in the production environment Alibaba   Generic service Stable Generic service, no interface class is required to implement any interface, for mock platform  Can be used in the production environment Alibaba   Echo test Tested echo test  On trial    Attachment Stable Attachment  Can be used in the production environment    Asynchronous call Tested Unavailable asynchronous call  On trial    Local call Tested Local call  On trial    Callback parameter Tested Callback parameter Used in special scenes On trial Registry   Events notify Tested Events notify, triggering before and after the remote call is executed  On trial    Local stub Stable Performing part of the logic on the client side  Can be used in the production environment Alibaba   Local mock Stable Forged return results, which can be executed when failed or directly executed, for service degradation Need support of registry Can be used in the production environment Alibaba   Delay publish Stable Delay publish, used to wait for the application to load warmup data or wait for spring context to load completely  Can be used in the production environment Alibaba   Lazy connect Tested Delay setting up connections, when invocation is set up  On trial Registry   Stickness connections Tested Stickness connections, always make a request to the same provider service unless the service is down, and then switch to another  On trial Registry   Token authorization Tested Token authorization, is used for service authorization Need support of registry On trial    Routing rule Tested Dynamically determining the call relationship Need support of registry On trial    Configuration rule Tested Distribute the configuration dynamically, is the switch of business logic Need support of registry On trial    Accesslog Tested Accesslog, used to record call information Local storage, impact performance, limited by disk size On trial    Distributed transaction Research JTA/XA three phase submission transaction(TCC) Unstable Unavailable     Strategy maturity    Feature Maturity Strength Problem Advise User     Zookeeper registry Stable Support the cluster, have various of related open source products, dubbo-2.</description>
    </item>
    
    <item>
      <title>Protocol Configuration</title>
      <link>/docs/v2.7/user/languages/erlang/serialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/languages/erlang/serialization/</guid>
      <description>The library now only supports hessian and json serialization.
Configuration example Protocol config is under the dubboerl application with sys.config
{dubboerl,[ %% other config ... 	{protocol,hessian} ]}    ConfigName Type DefaultValue Remarks     protocol atom() hessian hessian,json    </description>
    </item>
    
    <item>
      <title>redis protocol</title>
      <link>/docs/v2.7/user/references/protocol/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/protocol/redis/</guid>
      <description>RPC protocol based on redis implementation.
Register redis service address RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;redis://10.20.153.11/com.foo.BarService?category=providers&amp;amp;dynamic=false&amp;amp;application=foo&amp;amp;group=member&amp;amp;loadbalance=consistenthash&amp;#34;)); Use in client get service reference:
&amp;lt;dubbo:reference id=&amp;#34;store&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; group=&amp;#34;member&amp;#34; /&amp;gt; or direct access by IP:
&amp;lt;dubbo:reference id=&amp;#34;store&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; url=&amp;#34;redis://10.20.153.10:6379&amp;#34; /&amp;gt; you can also use a custom interface：
&amp;lt;dubbo:reference id=&amp;#34;store&amp;#34; interface=&amp;#34;com.foo.StoreService&amp;#34; url=&amp;#34;redis://10.20.153.10:6379&amp;#34; /&amp;gt; The method name is the same as the standard method name of memcached, just like get(key), set(key, value), delete(key)。</description>
    </item>
    
    <item>
      <title>Install Redis Register Center</title>
      <link>/docs/v2.7/admin/install/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/install/redis/</guid>
      <description>Redis 1 introductions, please refer to: Redis application center manual.
you need an origin Redis server only, and change the value from dubbo.registry.address to redis://127.0.0.1:6379 in conf/dubbo.properties of quick start
Redis configuration center cluster 2 write multiple server in client side and read from a single server.
Install:
wget http://redis.googlecode.com/files/redis-2.4.8.tar.gz tar xzf redis-2.4.8.tar.gz cd redis-2.4.8 make Configuration:
vi redis.conf Start:
nohup ./src/redis-server redis.conf &amp;amp; Stop:
killall redis-server  Command line 3:  .</description>
    </item>
    
    <item>
      <title>Reporting Security Issues</title>
      <link>/docs/contribution-guidelines/contributor/reporting-security-issues_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/contributor/reporting-security-issues_dev/</guid>
      <description>The Apache Software Foundation takes a rigorous standpoint in annihilating the security issues in its software projects. Apache Dubbo is highly sensitive and forthcoming to issues pertaining to its features and functionality.
REPORTING VULNERABILITY If you have apprehensions regarding Dubbo&amp;rsquo;s security or you discover vulnerability or potential threat, don’t hesitate to get in touch with the Apache Dubbo Security Team by dropping a mail at security@dubbo.apache.org. In the mail, specify the description of the issue or potential threat.</description>
    </item>
    
    <item>
      <title>Simple Registry Server</title>
      <link>/docs/v2.7/user/references/registry/simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/registry/simple/</guid>
      <description>Simple registry server itself is a regular dubbo service. In this way, third-party dependency is unnecessary, and communication keeps consistent at the same moment.
Configuration Register simple registry server as dubbo service:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;!-- application info configuration --&amp;gt; &amp;lt;dubbo:application name=&amp;#34;simple-registry&amp;#34; /&amp;gt; &amp;lt;!-- service protocol configuration --&amp;gt; &amp;lt;dubbo:protocol port=&amp;#34;9090&amp;#34; /&amp;gt; &amp;lt;!-- service configuration --&amp;gt; &amp;lt;dubbo:service interface=&amp;#34;org.apache.dubbo.registry.RegistryService&amp;#34; ref=&amp;#34;registryService&amp;#34; registry=&amp;#34;N/A&amp;#34; ondisconnect=&amp;#34;disconnect&amp;#34; callbacks=&amp;#34;1000&amp;#34;&amp;gt; &amp;lt;dubbo:method name=&amp;#34;subscribe&amp;#34;&amp;gt;&amp;lt;dubbo:argument index=&amp;#34;1&amp;#34; callback=&amp;#34;true&amp;#34; /&amp;gt;&amp;lt;/dubbo:method&amp;gt; &amp;lt;dubbo:method name=&amp;#34;unsubscribe&amp;#34;&amp;gt;&amp;lt;dubbo:argument index=&amp;#34;1&amp;#34; callback=&amp;#34;false&amp;#34; /&amp;gt;&amp;lt;/dubbo:method&amp;gt; &amp;lt;/dubbo:service&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Thread Model</title>
      <link>/docs/v2.7/user/examples/thread-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/thread-model/</guid>
      <description>Thread Model  If events handing can be executed quickly without sending new request like marking in memory. Events should be handled by I/O thread since it reduces thread dispatching. If event handling will be executed slowly or needs to send new I/O request like querying from database, events should be handled in thread pool. Otherwise, I/O thread will be blocked and then will be not able to receive requests. If events are handled by I/O thread, and send new I/O requests during the handling like sending a l login request during connect event, it will alert with “Potentially leading to deadlock”, but deadlock will not happen actually.</description>
    </item>
    
    <item>
      <title>thrift protocol</title>
      <link>/docs/v2.7/user/references/protocol/thrift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/protocol/thrift/</guid>
      <description>The current dubbo support thrift protocol is an extension of the thrift native protocol, adding some additional header information to the native protocol, such as service name, magic number, and so on.
The use of dubbo thrift protocol also need to use thrift idl compiler to generate the corresponding java code, follow-up version will do some enhancement in this aspect.
dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.thrift&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;libthrift&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.8.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configuration &amp;lt;dubbo:protocol name=&amp;#34;thrift&amp;#34; port=&amp;#34;3030&amp;#34; /&amp;gt; Example you can check dubbo thrift example</description>
    </item>
    
    <item>
      <title>Usage</title>
      <link>/docs/v2.7/user/preface/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/preface/usage/</guid>
      <description>Spring configuration of local service local.xml:
&amp;lt;bean id=“xxxService” class=“com.xxx.XxxServiceImpl” /&amp;gt; &amp;lt;bean id=“xxxAction” class=“com.xxx.XxxAction”&amp;gt; &amp;lt;property name=“xxxService” ref=“xxxService” /&amp;gt; &amp;lt;/bean&amp;gt; Spring configuration of remote service The remote configuration can be done by very little change based on the local configuration:
 split the local.xml into two part, put the service define part into remote-privider.xml(exists in the provider node), meanwhile the refrence part into remote-consumer.xml(exists in the consumer node). add &amp;lt;dubbo:service&amp;gt; to the provider&amp;rsquo;s configuration, and &amp;lt;dubbo:reference&amp;gt; to the consumer&amp;rsquo;s configuration.</description>
    </item>
    
    <item>
      <title>Cluster Extension</title>
      <link>/docs/v2.7/dev/impls/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/cluster/</guid>
      <description>Summary Group service providers in a cluster, and treat them as one single provider.
Extension Interface org.apache.dubbo.rpc.cluster.Cluster
Extension Configuration &amp;lt;dubbo:protocol cluster=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take affect if cluster attribute is not configured in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider cluster=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extensions  org.apache.dubbo.rpc.cluster.support.FailoverCluster org.apache.dubbo.rpc.cluster.support.FailfastCluster org.apache.dubbo.rpc.cluster.support.FailsafeCluster org.apache.dubbo.rpc.cluster.support.FailbackCluster org.apache.dubbo.rpc.cluster.support.ForkingCluster org.apache.dubbo.rpc.cluster.support.AvailableCluster  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxCluster.java (Cluster implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Cluster (plain text file with the content: xxx=com.</description>
    </item>
    
    <item>
      <title>Extension Guide</title>
      <link>/docs/contribution-guidelines/contributor/dubbo-extension-guide_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/contributor/dubbo-extension-guide_dev/</guid>
      <description>Dubbo Use microkernel + plugin design pattern. Microkernel is only responsible for assembling plugins, the functions of Dubbo are implemented by extension points(plugins), which means that all functions of Dubbo can be replaced by user customized extension.
Dubbo Ecosystem We recommend you to put extension to Dubbo ecosystem. Using this pattern will keep the core repository cleaner and decrease the maintains work. With less code also speed up core repository build process.</description>
    </item>
    
    <item>
      <title>Explicit Target</title>
      <link>/docs/v2.7/user/examples/explicit-target/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/explicit-target/</guid>
      <description>In the development and testing environment, it is often necessary to bypass the registry and test only designated service providers. In this case, point-to-point direct connection may be required, and the service provider will ignore the list of provider registration providers. The interface A configure Point-to-point, does not affect the B interface to obtain a list from the registry.
Configure with XML If it is online demand needs the point-to-point feature,You can configure the specified provider url at &amp;lt;dubbo:reference&amp;gt;.</description>
    </item>
    
    <item>
      <title>Extension Points To Reconstruct</title>
      <link>/docs/v2.7/dev/principals/extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/principals/extension/</guid>
      <description>http://javatar.iteye.com/blog/1041832
 With the promotion of service, the website of Dubbo service framework requirements gradually increase, Dubbo existing developers can implement demand is limited, many requirements have been delay, and site classmates also want to participate, combined with field, so the platform will be open to internal part of the project, let everyone together to implement, Dubbo as one of the pilot project.
Now that want to open it, about to take some extension point Dubbo, let participants black box extend as far as possible, rather than a white box to modify the code, or branch, quality, merger, the conflict will be hard to manage.</description>
    </item>
    
    <item>
      <title>Configuration Loading Process</title>
      <link>/docs/v2.7/user/configuration/configuration-load-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/configuration/configuration-load-process/</guid>
      <description>This document focuses on how the Dubbo framework collects the required configuration (including application configuration, registry configuration, service configuration, etc.) during the application startup phase to complete the process of service exposure and reference.
Depending on how you drive it (such as Spring or naked API programming), the configuration form will certainly vary, for detail please refer to XML Configuration, Annotation Configuration and API Configuration. In addition to the differences in peripheral drivers, Dubbo&amp;rsquo;s configuration reads generally follow the following principles:</description>
    </item>
    
    <item>
      <title>memcached protocol</title>
      <link>/docs/v2.7/user/references/protocol/memcached/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/protocol/memcached/</guid>
      <description>RPC protocol based on memcached implementation.
Register memcached service address RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;memcached://10.20.153.11/com.foo.BarService?category=providers&amp;amp;dynamic=false&amp;amp;application=foo&amp;amp;group=member&amp;amp;loadbalance=consistenthash&amp;#34;)); Use in client get service reference:
&amp;lt;dubbo:reference id=&amp;#34;cache&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; group=&amp;#34;member&amp;#34; /&amp;gt; or direct access by IP:
&amp;lt;dubbo:reference id=&amp;#34;cache&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; url=&amp;#34;memcached://10.20.153.10:11211&amp;#34; /&amp;gt; you can also use a custom interface：
&amp;lt;dubbo:reference id=&amp;#34;cache&amp;#34; interface=&amp;#34;com.foo.CacheService&amp;#34; url=&amp;#34;memcached://10.20.153.10:11211&amp;#34; /&amp;gt; The method name is the same as the standard method name of memcached, just like get(key), set(key, value), delete(key)。</description>
    </item>
    
    <item>
      <title>Metadata Reference</title>
      <link>/docs/v2.7/user/references/metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/metadata/</guid>
      <description>Background There are close to 30 configurations in dubbo provider. Excluding registry center governance requirements, a large part of configurations are used by the provider itself and do not need to be delivered to the consumer. This part of the data does not need to be written to the registry, but only needs to be persisted as key-value. There are also 20+ configurations in dubbo consumer. In the registry center, only a few configurations such as application, version, group, ip, dubbo version are needed in the list of service consumers.</description>
    </item>
    
    <item>
      <title>Install Simple monitor center</title>
      <link>/docs/v2.7/admin/install/monitor-center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/install/monitor-center/</guid>
      <description>The function of monitor center will be merged to dubbo admin, based on metrics, coming soon</description>
    </item>
    
    <item>
      <title>Apache Official Dubbo Page Maintenance</title>
      <link>/docs/contribution-guidelines/committer/apache-dubbo-page_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/committer/apache-dubbo-page_dev/</guid>
      <description>Apache has an official website that maintains information about all incubation projects. Each incubation project has an information page under this website. Dubbo&amp;rsquo;s information page address is https://incubator.apache.org/projects/dubbo.html.
When the project has undergone major changes, such as the addition of a new committer, the election of a new PMC, or a new version of Release, etc, these updates need to be maintained on this page. The project address for this official website is https://svn.</description>
    </item>
    
    <item>
      <title>Tracking with Pinpoint</title>
      <link>/docs/v2.7/admin/ops/pinpoint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/ops/pinpoint/</guid>
      <description>After using Dubbo to serve or integrate applications, assuming that a service backstage log shows an exception and that the service is invoked by multiple applications, it is often difficult to determine which application is called, and what is the cause of the problem, so we need a set of distributed tracking systems to quickly locate the problem. Pinpoint can help us quickly locate problems (of course, there are more than one solution).</description>
    </item>
    
    <item>
      <title>rmi protocol</title>
      <link>/docs/v2.7/user/references/protocol/rmi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/protocol/rmi/</guid>
      <description>The RMI protocol uses the JDK standard java.rmi.* Implementation, using a block short connection and JDK standard serialization.
Features  Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: Java standard Object Serialization Scope of application:the number of providers is more than that of consumers and can transfer files. Applicable scenarios: Conventional remote service method calls, interoperating with native RMI services  Constraint  Parameters and return values must implement Serializable interface The timeout configuration for RMI is invalid, you need to use java startup parameter settings:-Dsun.</description>
    </item>
    
    <item>
      <title>Tracing Dubbo service with Apache Skywalking</title>
      <link>/docs/v2.7/admin/ops/skywalking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/admin/ops/skywalking/</guid>
      <description>Introduction to Apache Skywalking Apache Skywalking(Incubator) is the APM system that it designed for micro-services architectures and cloud native architecture systems and supports distribute tracking. Apache skywalking (incubator) collects and analyzes the trace data and generates the relationship between the application and the service metric, Apache skywalking supports multiple languages agent, for example Java,.net core,Node.js and Go.
Currently, Skywalking has supported analysis the operation of distributed systems from 6 visual dimensions.</description>
    </item>
    
    <item>
      <title>webservice protocol</title>
      <link>/docs/v2.7/user/references/protocol/webservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/protocol/webservice/</guid>
      <description>WebService-based remote calling protocol，base on Apache CXF frontend-simple and transports-http implements。
Interoperable with native WebService services：
 Providers expose services using Dubbo&amp;rsquo;s WebService protocol, which consumers invoke directly using the standard WebService interface, Or the provider exposes the service using the standard WebService, which consumers invoke using the Dubbo WebService protocol.  dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cxf-rt-frontend-simple&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cxf-rt-transports-http&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Features  Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: SOAP text serialization Applicable scenarios: System integration, cross-language calls  Constraint  Parameters and return class should implement Serializable interface Parameters should try to use the basic types and POJO  Configuration configure webservice protocol：</description>
    </item>
    
    <item>
      <title>Some In The Design Of The Basic Common Sense</title>
      <link>/docs/v2.7/dev/principals/general-knowledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/principals/general-knowledge/</guid>
      <description>http://javatar.iteye.com/blog/706098
 Recently told the new team some design on the common sense, is likely to be new and some other help, the thought of a few temporarily, first write here.
The API and SPI separation Framework or component there are generally two types of customers, one is a consumer, is an extension.API (Application Programming Interface) is used to users, and SPI (Service dojo.provide Interface) is used to expand.At design time, try to put them off, and don&amp;rsquo;t mix.</description>
    </item>
    
    <item>
      <title>Public Agreement</title>
      <link>/docs/v2.7/dev/contract/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/contract/</guid>
      <description>This document is Dubbo public agreement, we expect all extension points comply with it.
URL  All extension points must include URL parameter, design URL as a context information which throughouts the whole extension point design system. URL standard style: protocol://username:password@host:port/path?key=value&amp;amp;key=value  Logging  Print ERROR log for unrecoverable and NEED TO ALARM situation. Print WARN log for recoverable exception or transient state inconsistency. Print INFO log for normally status.  </description>
    </item>
    
    <item>
      <title>Router Extension</title>
      <link>/docs/v2.7/dev/impls/router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/router/</guid>
      <description>Summary Pick one from service providers and fire the invocation.
Extension Interface  org.apache.dubbo.rpc.cluster.RouterFactory org.apache.dubbo.rpc.cluster.Router  Existing Extension  org.apache.dubbo.rpc.cluster.router.ScriptRouterFactory org.apache.dubbo.rpc.cluster.router.FileRouterFactory  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxRouterFactory.java (RouterFactory implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.RouterFactory (plain text file with the content: xxx=com.xxx.XxxRouterFactory) XxxRouterFactory.java：
package com.xxx; import org.apache.dubbo.rpc.cluster.RouterFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.RpcException; public class XxxRouterFactory implements RouterFactory { public &amp;lt;T&amp;gt; List&amp;lt;Invoker&amp;lt;T&amp;gt;&amp;gt; select(List&amp;lt;Invoker&amp;lt;T&amp;gt;&amp;gt; invokers, Invocation invocation) throws RpcException { // .</description>
    </item>
    
    <item>
      <title>Subscribe Only</title>
      <link>/docs/v2.7/user/examples/subscribe-only/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/subscribe-only/</guid>
      <description>To facilitate the development of tests, it is common to have a registry of all services available in develop environment.And the registration of a service provider under development may affect consumers&#39; inability to run.
You can let service provider developers only subscribe to services only (services developed may rely on other services) ,don&amp;rsquo;t register services under development and testing services under development with directly connection.
User configuration:
&amp;lt;dubbo:registry address=&amp;#34;10.20.153.10:9090&amp;#34; register=&amp;#34;false&amp;#34; /&amp;gt; or</description>
    </item>
    
    <item>
      <title>API Reference</title>
      <link>/docs/v2.7/user/references/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/api/</guid>
      <description>Generally speaking, dubbo keeps its functionality no intrusive as much as possible, but for some particular features, there&amp;rsquo;s no other way not only API can achieve. WarningDo not rely on APIs other than what&amp;rsquo;re mentioned here, otherwise your application may face the risk of incompatibility after upgrade dubbo.These APIs are summarized here below:
Configuration API org.apache.dubbo.config.ServiceConfig org.apache.dubbo.config.ReferenceConfig org.apache.dubbo.config.ProtocolConfig org.apache.dubbo.config.RegistryConfig org.apache.dubbo.config.MonitorConfig org.apache.dubbo.config.ApplicationConfig org.apache.dubbo.config.ModuleConfig org.apache.dubbo.config.ProviderConfig org.apache.dubbo.config.ConsumerConfig org.apache.dubbo.config.MethodConfig org.apache.dubbo.config.ArgumentConfig Pls. refer to API Configuration for further information.</description>
    </item>
    
    <item>
      <title>LoadBalance Extension</title>
      <link>/docs/v2.7/dev/impls/load-balance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/load-balance/</guid>
      <description>Summary Pick one from service providers and fire the invocation.
Extension Interface org.apache.dubbo.rpc.cluster.LoadBalance
Extension Configuration &amp;lt;dubbo:protocol loadbalance=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect when loadbalance is not configured in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider loadbalance=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxLoadBalance.java (LoadBalance implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.LoadBalance (plain text file with the content: xxx=com.xxx.XxxLoadBalance) XxxLoadBalance.java：
package com.xxx; import org.apache.dubbo.rpc.cluster.LoadBalance; import org.</description>
    </item>
    
    <item>
      <title>The Robustness Of The Design Implementation</title>
      <link>/docs/v2.7/dev/principals/robustness/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/principals/robustness/</guid>
      <description>http://oldratlee.com/380/tech/java/robustness-of-implement.html
 Dubbo as a remote service exposure, calls and management solutions, through the meridians of the application is running, its itself to achieve robustness of importance is self-evident.
Here are some Dubbo principle and method of use.
The log Logging is one of the most commonly used way to find, discover problems.Log quality is often neglected, there is no log on using expressly agreed upon.Attaches great importance to the use of the Log, and improve the concentration of the Log information.</description>
    </item>
    
    <item>
      <title>Test Coverage Guide</title>
      <link>/docs/contribution-guidelines/contributor/test-coverage-guide_dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contribution-guidelines/contributor/test-coverage-guide_dev/</guid>
      <description>The benefits of unit testing  Unit test code can help everyone to go into details and understand the function of the code. We can find bugs by test case, and then enhance the robustness of the code. Test case code is also the demo usage of the core code.  Some design principle of unit test case  Steps, fine-grained and combination conditions should be well designed. Attention to boundary condition test Test code should also be designed without writing useless code.</description>
    </item>
    
    <item>
      <title>Merger Extension</title>
      <link>/docs/v2.7/dev/impls/merger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/merger/</guid>
      <description>Summary Merge strategy for return result aggregation in group.
Extension Interface org.apache.dubbo.rpc.cluster.Merger
Extension Configuration &amp;lt;dubbo:method merger=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.rpc.cluster.merger.ArrayMerger org.apache.dubbo.rpc.cluster.merger.ListMerger org.apache.dubbo.rpc.cluster.merger.SetMerger org.apache.dubbo.rpc.cluster.merger.MapMerger  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxMerger.java (Merger implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Merger (plain text file with the content: xxx=com.xxx.XxxMerger) XxxMerger.java：
package com.xxx; import org.apache.dubbo.rpc.cluster.Merger; public class XxxMerger&amp;lt;T&amp;gt; implements Merger&amp;lt;T&amp;gt; { public T merge(T... results) { // ...  } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.Merger：</description>
    </item>
    
    <item>
      <title>Multiple Protocols</title>
      <link>/docs/v2.7/user/examples/multi-protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/multi-protocols/</guid>
      <description>Dubbo allows you to configure multiple protocols, support different protocols on different services, or support multiple protocols on the same service.
Every service export to one specific protocol separately Different protocol performance is not the same. Such as big data should use short connection protocol, small data and concurrent should use long connection protocol.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;dubbo:application name=&amp;#34;world&amp;#34; /&amp;gt; &amp;lt;dubbo:registry id=&amp;#34;registry&amp;#34; address=&amp;#34;10.</description>
    </item>
    
    <item>
      <title>Registry Extension</title>
      <link>/docs/v2.7/dev/impls/registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/registry/</guid>
      <description>Summary Registry extension is used for service registration and discovery.
Extension Interface  org.apache.dubbo.registry.RegistryFactory org.apache.dubbo.registry.Registry  Extension Configuration &amp;lt;!-- config registry server --&amp;gt; &amp;lt;dubbo:registry id=&amp;#34;xxx1&amp;#34; address=&amp;#34;xxx://ip:port&amp;#34; /&amp;gt; &amp;lt;!-- reference registry server, if registry attribute is not specified, then ApplicationContext will be scanned to find if there&amp;#39;s any --&amp;gt; &amp;lt;dubbo:service registry=&amp;#34;xxx1&amp;#34; /&amp;gt; &amp;lt;!-- default configuration for referencing registry server, it will take effect if there&amp;#39;s no registry attribute specified in &amp;lt;dubbo:service&amp;gt; --&amp;gt; &amp;lt;dubbo:provider registry=&amp;#34;xxx1&amp;#34; /&amp;gt; Extension Contract RegistryFactory.</description>
    </item>
    
    <item>
      <title>Versions</title>
      <link>/docs/v2.7/dev/release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/release/</guid>
      <description>New feature development and stability improvement are equally important to product. But adding new features will affect stability, dubbo uses the following version development pattern to achieve a good balance.
Two versions evolving at the same time  BugFix Version：low version，e.g. 2.4.x. This is called the GA version, which can be applied in production. We are supposed only to fix bugs in this version, and increase the third version number when release.</description>
    </item>
    
    <item>
      <title>Monitor Extension</title>
      <link>/docs/v2.7/dev/impls/monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/monitor/</guid>
      <description>Summary Extension to monitor service invocation times and time taken for each service invocation.
Extension Interface  org.apache.dubbo.monitor.MonitorFactory org.apache.dubbo.monitor.Monitor  Extension Configuration &amp;lt;!-- configure monitor center --&amp;gt; &amp;lt;dubbo:monitor address=&amp;#34;xxx://ip:port&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.monitor.support.dubbo.DubboMonitorFactory
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxMonitorFactoryjava (MonitorFactory implementation) |-XxxMonitor.java (Monitor implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.monitor.MonitorFactory (plain text file with the format: xxx=com.xxx.XxxMonitorFactory) XxxMonitorFactory.java：
package com.xxx; import org.apache.dubbo.monitor.MonitorFactory; import org.apache.dubbo.monitor.Monitor; import org.apache.dubbo.common.URL; public class XxxMonitorFactory implements MonitorFactory { public Monitor getMonitor(URL url) { return new XxxMonitor(url); } } XxxMonitor.</description>
    </item>
    
    <item>
      <title>Multiple Registries</title>
      <link>/docs/v2.7/user/examples/multi-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/multi-registry/</guid>
      <description>Dubbo supports the same service to register multiple registries, or different services were registered to different registries, or even reference the same name service from different registries. In addition, the registry supports custom extensions 1。
One service register to multiple registries For example: Alibaba some services are not deployed in Qingdao, only deployed in Hangzhou. While other applications in Qingdao need to reference this service, you can register your services to both registries at the same time.</description>
    </item>
    
    <item>
      <title>Checklist</title>
      <link>/docs/v2.7/dev/checklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/checklist/</guid>
      <description>Checklist before release  github milestones github change lists Travis CI test code find bugs  Checklist for bigfix versions  Create a github issue before coding Create unit test before bugfix Review Test your code (Normal process / Abnormal process) Record your design on github issue Complete javadoc and comment in code Manager for every version, responsible for scope and check  </description>
    </item>
    
    <item>
      <title>ExtensionFactory Extension</title>
      <link>/docs/v2.7/dev/impls/extension-factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/extension-factory/</guid>
      <description>Summary Factory to load dubbo extensions.
Extension Interface org.apache.dubbo.common.extension.ExtensionFactory
Extension Configuration &amp;lt;dubbo:application compiler=&amp;#34;jdk&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.common.extension.factory.SpiExtensionFactory org.apache.dubbo.config.spring.extension.SpringExtensionFactory  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxExtensionFactory.java (ExtensionFactory implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.extension.ExtensionFactory (plain text file with the content: xxx=com.xxx.XxxExtensionFactory) XxxExtensionFactory.java：
package com.xxx; import org.apache.dubbo.common.extension.ExtensionFactory; public class XxxExtensionFactory implements ExtensionFactory { public Object getExtension(Class&amp;lt;?&amp;gt; type, String name) { // ...  } } META-INF/dubbo/org.apache.dubbo.common.extension.ExtensionFactory：
xxx=com.xxx.XxxExtensionFactory </description>
    </item>
    
    <item>
      <title>Qos Command Usage </title>
      <link>/docs/v2.7/user/references/qos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/qos/</guid>
      <description>In dubbo 2.5.8 a new QOS module is introduced, to provide new telnet command support.
Port the port of new version telnet is different from the port of dubbo protocol. The default port is 22222, which can be changed by modifying configuration file dubbo.properties
dubbo.application.qos.port=33333 or by modifying the JVM parameter
-Ddubbo.application.qos.port=33333 Safety By default, dubbo can receive any command sent from the host, which can be changed by modifying the configuration file dubbo.</description>
    </item>
    
    <item>
      <title>Service Group</title>
      <link>/docs/v2.7/user/examples/service-group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/service-group/</guid>
      <description>When you have multi-impls of a interface,you can distinguish them with the group.
Service &amp;lt;dubbo:service group=&amp;#34;feedback&amp;#34; interface=&amp;#34;com.xxx.IndexService&amp;#34; /&amp;gt; &amp;lt;dubbo:service group=&amp;#34;member&amp;#34; interface=&amp;#34;com.xxx.IndexService&amp;#34; /&amp;gt; Reference &amp;lt;dubbo:reference id=&amp;#34;feedbackIndexService&amp;#34; group=&amp;#34;feedback&amp;#34; interface=&amp;#34;com.xxx.IndexService&amp;#34; /&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;memberIndexService&amp;#34; group=&amp;#34;member&amp;#34; interface=&amp;#34;com.xxx.IndewxService&amp;#34; /&amp;gt; Any group:
&amp;lt;dubbo:reference id=&amp;#34;barService&amp;#34; interface=&amp;#34;com.foo.BarService&amp;#34; group=&amp;#34;*&amp;#34; /&amp;gt; Warninggroup=&amp;quot;*&amp;quot; is supported after version 2.2.0, always select only one available group of implementations to invoke.</description>
    </item>
    
    <item>
      <title>Static Service</title>
      <link>/docs/v2.7/user/examples/static-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/static-service/</guid>
      <description>Sometimes we want to manually manage the registration and deregistration for service provider, we need to set registry to non-dynamoic mode.
&amp;lt;dubbo:registry address=&amp;#34;10.20.141.150:9090&amp;#34; dynamic=&amp;#34;false&amp;#34; /&amp;gt; Or
&amp;lt;dubbo:registry address=&amp;#34;10.20.141.150:9090?dynamic=false&amp;#34; /&amp;gt; dynamic mode is disabled when service provider initially registers, then we need to enable it manually. When disconnects, the setting will not be deleted automatically, need to disable it manually.
For a third party service provider like “memcachd”, it can directly write the address information of service provider to registry, which can be used by consumer.</description>
    </item>
    
    <item>
      <title>Telnet Command Reference</title>
      <link>/docs/v2.7/user/references/telnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/telnet/</guid>
      <description>Since 2.0.5 dubbo starts supporting to use telnet command to govern services.
How To Use telnet localhost 20880 Or:
echo status | nc -i 1 localhost 20880 It is possible to extend command status to check more resources, pls. refer to extension references for more details.
Supported Commands The built-in telnet commands are listed below. Furthermore, it is possible to extend telnet commands, pls. refer to extend telnet command for more details.</description>
    </item>
    
    <item>
      <title>Bad Smell</title>
      <link>/docs/v2.7/dev/code-smell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/code-smell/</guid>
      <description>Ugly Dubbo design or implementation will be record here.
URL Convertion 1. Point to Point Service export and refer service directly export：
EXPORT(dubbo://provider-address/com.xxx.XxxService?version=1.0.0&amp;#34;) service directly refer：
REFER(dubbo://provider-address/com.xxx.XxxService?version=1.0.0) 2. Export servie by registry export service to registry：
EXPORT(registry://registry-address/org.apache.dubbo.registry.RegistrySerevice?registry=dubbo&amp;amp;export=ENCODE(dubbo://provider-address/com.xxx.XxxService?version=1.0.0)) accquire registry：
url.setProtocol(url.getParameter(&amp;#34;registry&amp;#34;, &amp;#34;dubbo&amp;#34;)) GETREGISTRY(dubbo://registry-address/org.apache.dubbo.registry.RegistrySerevice) registry service address：
url.getParameterAndDecoded(&amp;#34;export&amp;#34;)) REGISTER(dubbo://provider-address/com.xxx.XxxService?version=1.0.0) 3. Refer service from registry refer service from registry：
REFER(registry://registry-address/org.apache.dubbo.registry.RegistrySerevice?registry=dubbo&amp;amp;refer=ENCODE(version=1.0.0)) accquire registry：
url.setProtocol(url.getParameter(&amp;#34;registry&amp;#34;, &amp;#34;dubbo&amp;#34;)) GETREGISTRY(dubbo://registry-address/org.apache.dubbo.registry.RegistrySerevice) subscribe service address：
url.addParameters(url.getParameterAndDecoded(&amp;#34;refer&amp;#34;)) SUBSCRIBE(dubbo://registry-address/com.xxx.XxxService?version=1.0.0) notify service address：</description>
    </item>
    
    <item>
      <title>Coding Convention</title>
      <link>/docs/v2.7/dev/coding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/coding/</guid>
      <description>Code style The source and JavaDoc of Dubbo follow below specifications:
 Code Conventions for the Java Programming Language How to Write Doc Comments for the Javadoc Tool  Exception and Logging  Log more context information as possible, such as error reason, error server address, client address, registry center address, dubbo version and so on. Try to put the main cause at the front, and display all other context information with key-value paris after it.</description>
    </item>
    
    <item>
      <title>Maven Plugin Reference</title>
      <link>/docs/v2.7/user/references/maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/references/maven/</guid>
      <description>Start a simple registry server Start a simple registry server listening on port 9099:
InfoDefault port is 9090 if the port is not specifiedmvn dubbo:registry -Dport=9099 Generate a service provider demo application Generate a service provider with the specified interface and version:
mvn dubbo:create -Dapplication=xxx -Dpackage=com.alibaba.xxx -Dservice=XxxService,YyyService -Dversion=1.0.0 </description>
    </item>
    
    <item>
      <title>Multiple Versions</title>
      <link>/docs/v2.7/user/examples/multi-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/multi-versions/</guid>
      <description>When an interface to achieve an incompatible upgrade, you can use the version number transition. Different versions of the services do not reference each other.
You can follow the steps below for version migration:
In the low pressure period, upgrade to half of the provider to the new version Then upgrade all consumers to the new version Then upgrade the remaining half providers to the new version  Old version of the service provider configuration:</description>
    </item>
    
    <item>
      <title>ProxyFactory Extension</title>
      <link>/docs/v2.7/dev/impls/proxy-factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/proxy-factory/</guid>
      <description>Summary Convert Invoker into business interface.
Extension Interface org.apache.dubbo.rpc.ProxyFactory
Extension Configuration &amp;lt;dubbo:protocol proxy=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, it will take effect when proxy attribute is not configured in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider proxy=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.rpc.proxy.JdkProxyFactory org.apache.dubbo.rpc.proxy.JavassistProxyFactory  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxProxyFactory.java (ProxyFactory implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ProxyFactory (plain text file with the content: xxx=com.xxx.XxxProxyFactory) XxxProxyFactory.java：
package com.xxx; import org.apache.dubbo.rpc.ProxyFactory; import org.apache.dubbo.rpc.Invoker; import org.</description>
    </item>
    
    <item>
      <title>Best practice</title>
      <link>/docs/v2.7/user/best-practice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/best-practice/</guid>
      <description>Modularization It is recommended to put service interfaces, service models, service exceptions, and so on in the API package,Because the service model and exception are part of the API, it is also in conformity with the modularization principle:Reusing the publish equivalence principle (REP) and the Common Reuse Principle (CRP).
If you need, you can also consider placing a spring reference configuration in the API package, so that the user can only use the configuration in the spring loading process, and the configuration suggestion is placed in the package directory of the module, so as not to conflict, eg:com/alibaba/china/xxx/dubbo-reference.</description>
    </item>
    
    <item>
      <title>Compiler Extension</title>
      <link>/docs/v2.7/dev/impls/compiler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/compiler/</guid>
      <description>Summary Java compiler, used for byte code dynamic generation for RPC invocation.
Extension Interface org.apache.dubbo.common.compiler.Compiler
Extension Configuration No configuration required, the extension will be automatically discovered and loaded.
Existing Extensions  org.apache.dubbo.common.compiler.support.JdkCompiler org.apache.dubbo.common.compiler.support.JavassistCompiler  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxCompiler.java (Compiler implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.compiler.Compiler (plain text file with the content: xxx=com.xxx.XxxCompiler) XxxCompiler.java：
package com.xxx; import org.apache.dubbo.common.compiler.Compiler; public class XxxCompiler implements Compiler { public Object getExtension(Class&amp;lt;?</description>
    </item>
    
    <item>
      <title>Dubbo Configuration Center Extensions</title>
      <link>/docs/v2.7/dev/impls/config-center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/config-center/</guid>
      <description>Design Purpose The key function of CC(Configuration Center) is to act as a Key-Value store. Dubbo Framework tells CC the key it care about, CC return the corresponding value.
Divided by application scenarios, CC mainly undertake the following responsibilities in Dubbo Framework:
 As a external configuration center, CC store configuration files like dubbo.properties, where the key is usually file name like dubbo.properties, and value is content of the file. Store single configuration items, like all kinds of switchs, contants, etc.</description>
    </item>
    
    <item>
      <title>Group Merger</title>
      <link>/docs/v2.7/user/examples/group-merger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/group-merger/</guid>
      <description>According to the group to invoke server and return the merge result 1, such as the menu service, the same interface, but there are a variety of implementations, using group distinction, consumers call each group and get the results, the merger can merge the resules, so that you can achieve aggregation Menu Item.
Related code can refer to dubbo project example
Configuration Merge all groups
&amp;lt;dubbo:reference interface=&amp;#34;com.xxx.MenuService&amp;#34; group=&amp;#34;*&amp;#34; merger=&amp;#34;true&amp;#34; /&amp;gt; Merge the specified group</description>
    </item>
    
    <item>
      <title>Compatibility Test</title>
      <link>/docs/v2.7/dev/tck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/tck/</guid>
      <description>Dubbo&amp;rsquo;s protocol, communication, serialization, registry, load balancing and other SPI all offer alternative strategies for different application scenarios while our test cases are very scattered. Ours is always uncertain whether it can satisfy the complete contract of the extension point when users need to add a new implementation.
Thus we need to use TCK (Technology Compatibility Kit) for the core extension points. When users add a new implementaion, compatibility with the rest of the framework can be ensured with TCK.</description>
    </item>
    
    <item>
      <title>Dispatcher Extension</title>
      <link>/docs/v2.7/dev/impls/dispatcher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/dispatcher/</guid>
      <description>Summary Thread pool dispatch strategy.
Extension Interface org.apache.dubbo.remoting.Dispatcher
Extension Configuration &amp;lt;dubbo:protocol dispatcher=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if dispatcher attribute is not set in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider dispatcher=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extensions  org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher org.apache.dubbo.remoting.transport.dispatcher.direct.DirectDispatcher org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyDispatcher org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxDispatcher.java (Dispatcher implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.Dispatcher (plain text file with the content: xxx=com.xxx.XxxDispatcher) XxxDispatcher.java：
package com.xxx; import org.apache.dubbo.remoting.Dispatcher; public class XxxDispatcher implements Dispatcher { public Group lookup(URL url) { // .</description>
    </item>
    
    <item>
      <title>Parameter Validation</title>
      <link>/docs/v2.7/user/examples/parameter-validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/parameter-validation/</guid>
      <description>The parameter validation 1 is based on [JSR303] (https://jcp.org/en/jsr/detail?id=303). The user simply add the validation annotation of the JSR303 and declares the filter for validation 2.
Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.validation&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;validation-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0.GA&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-validator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.2.0.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Sample Example of Parameter Annotation import java.io.Serializable; import java.util.Date; import javax.validation.constraints.Future; import javax.validation.constraints.Max; import javax.validation.constraints.Min; import javax.validation.constraints.NotNull; import javax.validation.constraints.Past; import javax.validation.constraints.Pattern; import javax.validation.constraints.Size; public class ValidationParameter implements Serializable { private static final long serialVersionUID = 7158911668568000392L; @NotNull // Required  @Size(min = 1, max = 20) // range  private String name; @NotNull(groups = ValidationService.</description>
    </item>
    
    <item>
      <title>Recommended usage</title>
      <link>/docs/v2.7/user/recommend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/recommend/</guid>
      <description>Configuring the attributes of the consumer side as much as possible on the provider side the reason is：
 Service providers are more aware of service performance parameters than service users，Such as the timeout time of the call, the reasonable retry times, and so on. If a attribute is configurated in provider side, not configurated in consumer side, consumer service will use the attribute in provider side. That is to say, the provider side&amp;rsquo;s attribute can be used as consumer&amp;rsquo;s default value 1.</description>
    </item>
    
    <item>
      <title>Cache Result</title>
      <link>/docs/v2.7/user/examples/result-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/result-cache/</guid>
      <description>Cache result is used to speed up access to popular data. Dubbo provides declarative caching to reduce the user work of adding cache 1.
Cache Type  lru Delete excess cache Based on the principle of least recently used. The hottest data is cached. threadlocal The current thread cache. For example, a page have a lot of portal and each portal need to check user information, you can reduce this redundant visit with this cache.</description>
    </item>
    
    <item>
      <title>Capacity plan</title>
      <link>/docs/v2.7/user/capacity-plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/capacity-plan/</guid>
      <description>The following data for reference：
Use member service project of Dubbo  Receive 400,000,000 remote calls one day Use 12 standard servers to provide services (CPU:8 core, memory: 8G) The average load is less than 1 (For 8 core CPU, the load is very low) The average response time is 2.3 to 2.5 ms，Network cost about 1.5 to 1.6 ms(Related to the size of the packet )  Use product authorization service project of Dubbo  Receive 300,000,000 remote calls one day Use 8 standard servers to provide services (CPU:8 core, memory: 8G) The average load is less than 1 (For 8 core CPU, the load is very low) The average response time is 1.</description>
    </item>
    
    <item>
      <title>ThreadPool Extension</title>
      <link>/docs/v2.7/dev/impls/threadpool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/threadpool/</guid>
      <description>Summary Thread pool strategy extension for service provider. When server receives one request, it needs a thread from thread pool to execute business logic in service provider.
Extension Interface org.apache.dubbo.common.threadpool.ThreadPool
Extension Configuration &amp;lt;dubbo:protocol threadpool=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, it will take effect when threadpool attribute is not specified in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider threadpool=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.common.threadpool.FixedThreadPool org.apache.dubbo.common.threadpool.CachedThreadPool  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxThreadPool.java (ThreadPool implementation) |-resources |-META-INF |-dubbo |-org.</description>
    </item>
    
    <item>
      <title>Generic Reference</title>
      <link>/docs/v2.7/user/examples/generic-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/generic-reference/</guid>
      <description>Generic invocation is mainly used when the client does not have API interface or model class, all POJOs in parameters and return values are represented by Map.Commonly used for framework integration such as: implementing a common service testing framework, all service implementations can be invoked via GenericService.
Use generic invocation via Spring Declared in the Spring configuration file generic =&amp;quot; true &amp;quot;：
&amp;lt;dubbo:reference id=&amp;#34;barService&amp;#34; interface=&amp;#34;com.foo.BarService&amp;#34; generic=&amp;#34;true&amp;#34; /&amp;gt; In Java code, get barService and start generic invocation:</description>
    </item>
    
    <item>
      <title>Performance</title>
      <link>/docs/v2.7/user/perf-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/perf-test/</guid>
      <description>Test instructions In this performance test, the performance of all Dubbo 2.0 supported protocols in different sizes and data types is tested and compared with the Dubbo 1.0. The overall performance is increased by 1.0 compared with 10%, and the average increase is 10%. The performance improvement of 10%~50% can also be achieved by using the new Dubbo serialization of Dubbo 2.0 . In the stability test, because the underlying communication framework is changed from Mina to netty, the growth of objects in old area is greatly reduced, and the 50 hour operation increases less than 200m and no fullgc.</description>
    </item>
    
    <item>
      <title>Serialization Extension</title>
      <link>/docs/v2.7/dev/impls/serialize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/serialize/</guid>
      <description>Summary Extension to serializing java object into byte code stream for transporting on the network, and vise versa.
Extension Interface  org.apache.dubbo.common.serialize.Serialization org.apache.dubbo.common.serialize.ObjectInput org.apache.dubbo.common.serialize.ObjectOutput  Extension Configuration &amp;lt;!-- protocol serialization style --&amp;gt; &amp;lt;dubbo:protocol serialization=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if serialization is not configured in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider serialization=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.common.serialize.dubbo.DubboSerialization org.apache.dubbo.common.serialize.hessian.Hessian2Serialization org.apache.dubbo.common.serialize.java.JavaSerialization org.apache.dubbo.common.serialize.java.CompactedJavaSerialization  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxSerialization.java (Serialization implementation) |-XxxObjectInput.</description>
    </item>
    
    <item>
      <title>Generic Service</title>
      <link>/docs/v2.7/user/examples/generic-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/generic-service/</guid>
      <description>The implementation of the generic interface is mainly used when there is no API interface and model class on the server side. All POJOs in the parameters and return values are represented by the Map and are usually used for framework integration. For example, to implement a universal remote service Mock framework, handle all service requests by implementing the GenericService interface.
In Java code, implement GenericService interface：
package com.foo; public class MyGenericService implements GenericService { public Object $invoke(String methodName, String[] parameterTypes, Object[] args) throws GenericException { if (&amp;#34;sayHello&amp;#34;.</description>
    </item>
    
    <item>
      <title>Test coverage report</title>
      <link>/docs/v2.7/user/coveragence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/coveragence/</guid>
      <description> v2.0 Codecov report , Statistics since 2017-12-29 The test coverage is :  , we can get the report in https://codecov.io/gh/apache/dubbo v1.0 Based on version 2.0.12，Statistics on 2012-02-03  </description>
    </item>
    
    <item>
      <title>Transporter Extension</title>
      <link>/docs/v2.7/dev/impls/remoting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/remoting/</guid>
      <description>Summary Transportation extension for communication between server and client.
Extension Interface  org.apache.dubbo.remoting.Transporter org.apache.dubbo.remoting.Server org.apache.dubbo.remoting.Client  Extension Configuration &amp;lt;!-- server and client use the same transporter --&amp;gt; &amp;lt;dubbo:protocol transporter=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- server and client use the different transporter --&amp;gt; &amp;lt;dubbo:protocol server=&amp;#34;xxx&amp;#34; client=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect when transport/server/client attribute is not set in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider transporter=&amp;#34;xxx&amp;#34; server=&amp;#34;xxx&amp;#34; client=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.remoting.transport.transporter.netty.NettyTransporter org.apache.dubbo.remoting.transport.transporter.mina.MinaTransporter org.apache.dubbo.remoting.transport.transporter.grizzly.GrizzlyTransporter  Extension Guide Directory layout:</description>
    </item>
    
    <item>
      <title>Benchmark Suite</title>
      <link>/docs/v2.7/user/benchmark-tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/benchmark-tool/</guid>
      <description>download： git clone https://github.com/apache/dubbo.git compile benchmark: cd dubbo/dubbo-test/dubbo-test-benchmark; mvn clean install uncompress benchmark： dubbo/dubbo-test/dubbo-test-benchmark/target/dubbo-test-benchmark-2.6.2-SNAPSHOT.tar.gz  Read ReadMe.txt (the contents are as follows, in the compressed package.)
  Build a new benchmark project, such as demo.benchmark
  Import the your own interface api jar and dubbo.benchmark.jar (Unzip dubbo.benchmark.tar.gz, under the lib directory )
  Create a new class to implement AbstractClientRunnable
 Implement the constructor of the parent class Implement the invoke method and create a local interface proxy by serviceFactory，and finish your own business logic, as follows:  public Object invoke(ServiceFactory serviceFactory) { DemoService demoService = (DemoService) serviceFactory.</description>
    </item>
    
    <item>
      <title>Echo Testing Service</title>
      <link>/docs/v2.7/user/examples/echo-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/echo-service/</guid>
      <description>Echo testing is used for check the service is available,Echo testing is performed according to the normal request flow and is able to test whether the entire call is unobstructed and can be used for monitoring.
All the services will be automatically implemented EchoService interface,just cast any service reference to EchoService to use it.
Spring configuration:
&amp;lt;dubbo:reference id=&amp;#34;memberService&amp;#34; interface=&amp;#34;com.xxx.MemberService&amp;#34; /&amp;gt; The java code：
// reference the remote service MemberService memberService = ctx.</description>
    </item>
    
    <item>
      <title>Exchanger Extension</title>
      <link>/docs/v2.7/dev/impls/exchanger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/exchanger/</guid>
      <description>Summary Exchange message between request and response on network transport layer.
Extension Interface  org.apache.dubbo.remoting.exchange.Exchanger org.apache.dubbo.remoting.exchange.ExchangeServer org.apache.dubbo.remoting.exchange.ExchangeClient  Extension Configuration &amp;lt;dubbo:protocol exchanger=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if exchanger attribute is not set in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider exchanger=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.remoting.exchange.exchanger.HeaderExchanger
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxExchanger.java (Exchanger implementation) |-XxxExchangeServer.java (ExchangeServer implementation) |-XxxExchangeClient.java (ExchangeClient implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.exchange.Exchanger (plain text file with the content: xxx=com.</description>
    </item>
    
    <item>
      <title>Context</title>
      <link>/docs/v2.7/user/examples/context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/context/</guid>
      <description>All environment information of during the current call will put into the context,and all configuration information will convert the parameters of URL instance,Ref to the column of URL parameters at the schema configuration reference book
RpcContext is a temporary status recorder of ThreadLocal,when accept RPC request or send RPC request,The RpcContext will be changed.Such as: A call B and B call C. On B machine,before B call C,the RpcContext will record the information of A call B.</description>
    </item>
    
    <item>
      <title>Networker Extension</title>
      <link>/docs/v2.7/dev/impls/networker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/networker/</guid>
      <description>Summary Extension for peer to peer network grouping.
Extension Interface org.apache.dubbo.remoting.p2p.Networker
Extension Configuration &amp;lt;dubbo:protocol networker=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, it takes effect if networker attribute is not set in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider networker=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.remoting.p2p.support.MulticastNetworker org.apache.dubbo.remoting.p2p.support.FileNetworker  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxNetworker.java (Networker implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.p2p.Networker (plain text file with the content: xxx=com.xxx.XxxNetworker) XxxNetworker.java：
package com.xxx; import org.apache.dubbo.remoting.p2p.Networker; public class XxxNetworker implements Networker { public Group lookup(URL url) { // .</description>
    </item>
    
    <item>
      <title>REST support</title>
      <link>/docs/v2.7/user/rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/rest/</guid>
      <description>Original author: Li Shen Document copyright: Apache 2.0license Signature - No interpretation
Working in progress &amp;hellip;
 This article is lengthy since REST involves many aspects. Besides, it refers to the document style of Spring and so on. Not only limited to usage of the framework but also strives to present the design concept of the framework and the architectural idea of an excellent application. For people who only want to get a glimpse of Dubbo and REST, all they need is to browse through the Overview to Introduction to Standard Java REST API: JAX-RS.</description>
    </item>
    
    <item>
      <title>Implicit parameters</title>
      <link>/docs/v2.7/user/examples/attachment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/attachment/</guid>
      <description>You can implicitly pass parameters between service consumers and providers via setAttachment and getAttachment on RpcContext. Set the implicit parameters at service consumer side Via setAttachment on RpcContext set key/value pair for implicitly pass parameters.When finished once remote invoke,will be clear,so multi-invoke must set multi-times.
RpcContext.getContext().setAttachment(&amp;#34;index&amp;#34;, &amp;#34;1&amp;#34;); // implicitly pass parameters,behind the remote call will implicitly send these parameters to the server side, similar to the cookie, for the framework of integration, not recommended for regular business use xxxService.</description>
    </item>
    
    <item>
      <title>Simple Monitor</title>
      <link>/docs/v2.7/user/simple-monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/simple-monitor/</guid>
      <description>WarningMonitor service is a standard Dubbo service，can be exported to the registry，also can be connected straightly.
Install the simple registry
 export a simple monitor service to the registry: (If you use the installer, you don&amp;rsquo;t need to write this configuration yourself. if you implement the monitor service yourself，need it)
&amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;!-- configuration of current application --&amp;gt; &amp;lt;dubbo:application name=&amp;#34;simple-monitor&amp;#34; /&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>TelnetHandler Extension</title>
      <link>/docs/v2.7/dev/impls/telnet-handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/telnet-handler/</guid>
      <description>Summary Extension to telnet command. All server should support telnet access for operation convenience.
Extension Interface org.apache.dubbo.remoting.telnet.TelnetHandler
Extension Configuration &amp;lt;dubbo:protocol telnet=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if telnet attribute is not specified in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider telnet=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.remoting.telnet.support.ClearTelnetHandler org.apache.dubbo.remoting.telnet.support.ExitTelnetHandler org.apache.dubbo.remoting.telnet.support.HelpTelnetHandler org.apache.dubbo.remoting.telnet.support.StatusTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ListTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ChangeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CurrentTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.InvokeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.TraceTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CountTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.PortTelnetHandler  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxTelnetHandler.java (TelnetHandler implementation) |-resources |-META-INF |-dubbo |-org.</description>
    </item>
    
    <item>
      <title>Asynchronous Call</title>
      <link>/docs/v2.7/user/examples/async-call/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/async-call/</guid>
      <description>As dubbo is based on a non-blocking NIO network layer, the client can start parallel call to multiple remote services without explicitly starting mulithreads, which costs relatively fewer resources.
You can config at consumer.xml for setup asynchronous call some remote service.
&amp;lt;dubbo:reference id=&amp;#34;fooService&amp;#34; interface=&amp;#34;com.alibaba.foo.FooService&amp;#34;&amp;gt; &amp;lt;dubbo:method name=&amp;#34;findFoo&amp;#34; async=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;/dubbo:reference&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;barService&amp;#34; interface=&amp;#34;com.alibaba.bar.BarService&amp;#34;&amp;gt; &amp;lt;dubbo:method name=&amp;#34;findBar&amp;#34; async=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;/dubbo:reference&amp;gt; Configure the above configuration information,you can invoke the remote service in your code.</description>
    </item>
    
    <item>
      <title>Asynchronous Execution</title>
      <link>/docs/v2.7/user/examples/async-execute-on-provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/async-execute-on-provider/</guid>
      <description>The asynchronous execute on provider switches the blocked service from the internal thread pool of Dubbo to the service custom thread to avoid over-occupation of the Dubbo thread pool, which helps to avoid mutual influence between different services.Asynchronous-Execution is not conducive to saving resources or improving RPC responsiveness, because if business execution needs to be blocked, there is always a thread to be responsible for execution.
NoticeNote: Asynchronous execute on provider and asynchronous execute on consumer are independent of each other.</description>
    </item>
    
    <item>
      <title>StatusChecker Extension</title>
      <link>/docs/v2.7/dev/impls/status-checker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/status-checker/</guid>
      <description>Summary Extension to check status of resources service depends on. This status checker can be used in both telnet status command and status page.
Extension Interface org.apache.dubbo.common.status.StatusChecker
Extension Configuration &amp;lt;dubbo:protocol status=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if no status attribute is configured in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider status=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.common.status.support.MemoryStatusChecker org.apache.dubbo.common.status.support.LoadStatusChecker org.apache.dubbo.rpc.dubbo.status.ServerStatusChecker org.apache.dubbo.rpc.dubbo.status.ThreadPoolStatusChecker org.apache.dubbo.registry.directory.RegistryStatusChecker org.apache.dubbo.rpc.config.spring.status.SpringStatusChecker org.apache.dubbo.rpc.config.spring.status.DataSourceStatusChecker  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxStatusChecker.</description>
    </item>
    
    <item>
      <title>Container Extension</title>
      <link>/docs/v2.7/dev/impls/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/container/</guid>
      <description>Summary Service container extension, useful for loading custom contents.
Extension Interface org.apache.dubbo.container.Container
Extension Configuration java org.apache.dubbo.container.Main spring jetty log4j Existing Extensions  org.apache.dubbo.container.spring.SpringContainer org.apache.dubbo.container.spring.JettyContainer org.apache.dubbo.container.spring.Log4jContainer  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxContainer.java (Container implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.Container (plain text file with the content: xxx=com.xxx.XxxContainer) XxxContainer.java：
package com.xxx; org.apache.dubbo.container.Container; public class XxxContainer implements Container { public Status start() { // ...  } public Status stop() { // .</description>
    </item>
    
    <item>
      <title>Local Call</title>
      <link>/docs/v2.7/user/examples/local-call/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/local-call/</guid>
      <description>The local call uses the injvm protocol, a pseudo-protocol that does not turn on the port, does not initiate remote calls, is directly associated within the JVM, but executes the Dubbo Filter chain.
Configuration Configure injvm protocol
&amp;lt;dubbo:protocol name=&amp;#34;injvm&amp;#34; /&amp;gt; Configure default provider
&amp;lt;dubbo:provider protocol=&amp;#34;injvm&amp;#34; /&amp;gt; Configure default service
&amp;lt;dubbo:service protocol=&amp;#34;injvm&amp;#34; /&amp;gt; Use injvm first
&amp;lt;dubbo:consumer injvm=&amp;#34;true&amp;#34; .../&amp;gt; &amp;lt;dubbo:provider injvm=&amp;#34;true&amp;#34; .../&amp;gt; or
&amp;lt;dubbo:reference injvm=&amp;#34;true&amp;#34; .../&amp;gt; &amp;lt;dubbo:service injvm=&amp;#34;true&amp;#34; .../&amp;gt; Note: Dubbo services are exposed locally from 2.</description>
    </item>
    
    <item>
      <title>Callback parameter</title>
      <link>/docs/v2.7/user/examples/callback-parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/callback-parameter/</guid>
      <description>The parameter callback is the same as calling a local callback or listener, just declare which parameter is a callback type in Spring&amp;rsquo;s configuration file, and Dubbo will generate a reverse proxy based on the long connection so that client logic can be called from the server.Can ref to Sample code in the dubbo project.
Example of service interface CallbackService.java package com.callback; public interface CallbackService { void addListener(String key, CallbackListener listener); } CallbackListener.</description>
    </item>
    
    <item>
      <title>PageHandler Extension</title>
      <link>/docs/v2.7/dev/impls/page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/page/</guid>
      <description>Summary Extension for page handler
Extension Interface org.apache.dubbo.container.page.PageHandler
Extension Configuration &amp;lt;dubbo:protocol page=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if page attribute is not set in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider page=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension  org.apache.dubbo.container.page.pages.HomePageHandler org.apache.dubbo.container.page.pages.StatusPageHandler org.apache.dubbo.container.page.pages.LogPageHandler org.apache.dubbo.container.page.pages.SystemPageHandler  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxPageHandler.java (PageHandler implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.page.PageHandler (plain text file with the content: xxx=com.xxx.XxxPageHandler) XxxPageHandler.java：
package com.xxx; import org.apache.dubbo.container.page.PageHandler; public class XxxPageHandler implements PageHandler { public Group lookup(URL url) { // .</description>
    </item>
    
    <item>
      <title>Cache Extension</title>
      <link>/docs/v2.7/dev/impls/cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/cache/</guid>
      <description>Summary Cache the return value, use request parameter as the key.
Extension Interface org.apache.dubbo.cache.CacheFactory
Extension Configuration &amp;lt;dubbo:service cache=&amp;#34;lru&amp;#34; /&amp;gt; &amp;lt;!-- method level cache --&amp;gt; &amp;lt;dubbo:service&amp;gt;&amp;lt;dubbo:method cache=&amp;#34;lru&amp;#34; /&amp;gt;&amp;lt;/dubbo:service&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:service&amp;gt;没有配置cache属性时，使用此配置 --&amp;gt; &amp;lt;!-- default configuration, will take affect if cache attribute isn&amp;#39;t configured in &amp;lt;dubbo:service&amp;gt; --&amp;gt; &amp;lt;dubbo:provider cache=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extensions  org.apache.dubbo.cache.support.lru.LruCacheFactory org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory org.apache.dubbo.cache.support.jcache.JCacheFactory  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxCacheFactory.java (CacheFactory implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.cache.CacheFactory (plain text file with contents: xxx=com.</description>
    </item>
    
    <item>
      <title>Event Notification</title>
      <link>/docs/v2.7/user/examples/events-notify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/events-notify/</guid>
      <description>Before calling, after calling, when an exception occurs,will trigger oninvoke, onreturn, onthrow events.You can configure which method to notify when an event occurs.
Service Interface interface IDemoService { public Person get(int id); } Service provider implement the service. class NormalDemoService implements IDemoService { public Person get(int id) { return new Person(id, &amp;#34;charles`son&amp;#34;, 4); } } Service provider configure the service which it provided. &amp;lt;dubbo:application name=&amp;#34;rpc-callback-demo&amp;#34; /&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; &amp;lt;bean id=&amp;#34;demoService&amp;#34; class=&amp;#34;org.</description>
    </item>
    
    <item>
      <title>Local Stub</title>
      <link>/docs/v2.7/user/examples/local-stub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/local-stub/</guid>
      <description>When using rpc, the client usually only the interface, but sometimes the client also want to perform part of the logic in the client. For example: do ThreadLocal cache, verify parameters, return mock data when call fails., etc.
To solve this problem, you can configure the stub in the API, so that when the client generates the proxy instance, it passes the proxy to the Stub via the constructor 1, and then you can implement your logic in the stub implementation code.</description>
    </item>
    
    <item>
      <title>Validation Extension</title>
      <link>/docs/v2.7/dev/impls/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/validation/</guid>
      <description>Summary Extension for parameter validation.
Extension Interface org.apache.dubbo.validation.Validation
Extension Configuration &amp;lt;dubbo:service validation=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, it will take effect when there&amp;#39;s no validation attribute specified in &amp;lt;dubbo:service&amp;gt; --&amp;gt; &amp;lt;dubbo:provider validation=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.validation.support.jvalidation.JValidation
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxValidation.java (Validation implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.validation.Validation (plain text file with the content: xxx=com.xxx.XxxValidation) XxxValidation.java：
package com.xxx; import org.apache.dubbo.validation.Validation; public class XxxValidation implements Validation { public Object getValidator(URL url) { // .</description>
    </item>
    
    <item>
      <title>Local Mock</title>
      <link>/docs/v2.7/user/examples/local-mock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/local-mock/</guid>
      <description>Local mock 1 is usually used for service downgrade, such as a verification service, the client does not throw an exception when the service provider hangs up all the time, but returns the authorization failed through the Mock data.
Configured in the spring configuration file as follows:
&amp;lt;dubbo:reference interface=&amp;#34;com.foo.BarService&amp;#34; mock=&amp;#34;true&amp;#34; /&amp;gt; or
&amp;lt;dubbo:reference interface=&amp;#34;com.foo.BarService&amp;#34; mock=&amp;#34;com.foo.BarServiceMock&amp;#34; /&amp;gt; Mock implementation in the project 2：
package com.foo; public class BarServiceMock implements BarService { public String sayHello(String name) { // You can return mock data, this method is only executed when an RpcException is thrown.</description>
    </item>
    
    <item>
      <title>LoggerAdapter Extension</title>
      <link>/docs/v2.7/dev/impls/logger-adapter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/dev/impls/logger-adapter/</guid>
      <description>Summary Extension for adapting logger output
Extension Interface org.apache.dubbo.common.logger.LoggerAdapter
Extension Configuration &amp;lt;dubbo:application logger=&amp;#34;xxx&amp;#34; /&amp;gt; Or:
-Ddubbo:application.logger=xxx Existing Extension  org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter org.apache.dubbo.common.logger.jcl.JclLoggerAdapter org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter org.apache.dubbo.common.logger.jdk.JdkLoggerAdapter  Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxLoggerAdapter.java (LoggerAdapter implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.logger.LoggerAdapter (plain text file with the content: xxx=com.xxx.XxxLoggerAdapter) XxxLoggerAdapter.java：
package com.xxx; import org.apache.dubbo.common.logger.LoggerAdapter; public class XxxLoggerAdapter implements LoggerAdapter { public Logger getLogger(URL url) { // ...  } } XxxLogger.java：</description>
    </item>
    
    <item>
      <title>Delay Publish</title>
      <link>/docs/v2.7/user/examples/delay-publish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/delay-publish/</guid>
      <description>If your services need time to warm up, such as: initialization cache or another reference resources has to be ready. You can use the delay feature to delay publishing services. We fine-tuned the service delay exposure logic in Dubbo 2.6.5, delaying the countdown of services that require delayed exposure until Spring initialization is complete. You won&amp;rsquo;t be aware of this change while using Dubbo, so please be assured that use.</description>
    </item>
    
    <item>
      <title>Concurrency Control</title>
      <link>/docs/v2.7/user/examples/concurrency-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/concurrency-control/</guid>
      <description>Example of configuration  Example 1: Control the concurrency of all method for a specified service interface at server-side  Limit each method of com.foo.BarService to no more than 10 concurrent server-side executions (or take up thread pool threads):
&amp;lt;dubbo:service interface=&amp;#34;com.foo.BarService&amp;#34; executes=&amp;#34;10&amp;#34; /&amp;gt;  Example 2: Control the concurrency of specified method for a specified service interface at server-side  Limit the sayHello method of com.foo.BarService to no more than 10 concurrent server-side executions(or take up thread pool threads):</description>
    </item>
    
    <item>
      <title>Config connections</title>
      <link>/docs/v2.7/user/examples/config-connections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/config-connections/</guid>
      <description>Control connections at server-side Limit server-side accept to no more than 10 connections
&amp;lt;dubbo:provider protocol=&amp;#34;dubbo&amp;#34; accepts=&amp;#34;10&amp;#34; /&amp;gt; OR
&amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; accepts=&amp;#34;10&amp;#34; /&amp;gt; Control connections at client-side Limit client-side creating connection to no more than 10 connections for interface com.foo.BarService.
&amp;lt;dubbo:reference interface=&amp;#34;com.foo.BarService&amp;#34; connections=&amp;#34;10&amp;#34; /&amp;gt; OR
&amp;lt;dubbo:service interface=&amp;#34;com.foo.BarService&amp;#34; connections=&amp;#34;10&amp;#34; /&amp;gt; WarningIf used default protocol(dubbo protocol), and the value of connections attribute is great than 0,then each service reference will has itself connection,else all service which belong to same remote server will share only one connection.</description>
    </item>
    
    <item>
      <title>Lazy Connect</title>
      <link>/docs/v2.7/user/examples/lazy-connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/lazy-connect/</guid>
      <description>Lazy connect can reduce the number of keep-alive connections. When a call is initiated, create a keep-alive connection.1
&amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; lazy=&amp;#34;true&amp;#34; /&amp;gt;   Note: This configuration takes effect only for dubbo protocols that use keep-alive connections. &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>Stickiness Connection</title>
      <link>/docs/v2.7/user/examples/stickiness/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/stickiness/</guid>
      <description>Sticky connections are used for stateful services, as much as possible so that clients always make calls to the same provider, unless the provider hangs up and connects to the other one.
Sticky connections will automatically open Lazy Connection to reduce the number of long connections.
&amp;lt;dubbo:reference id=&amp;#34;xxxService&amp;#34; interface=&amp;#34;com.xxx.XxxService&amp;#34; sticky=&amp;#34;true&amp;#34; /&amp;gt; Dubbo supports method-level sticky connection, and if you want more granular control, you can also configure as follow.
&amp;lt;dubbo:reference id=&amp;#34;xxxService&amp;#34; interface=&amp;#34;com.</description>
    </item>
    
    <item>
      <title>Token Authorization</title>
      <link>/docs/v2.7/user/examples/token-authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/token-authorization/</guid>
      <description>Through the token authorization control center at the registry to decide whether to issue tokens to consumers, you can prevent consumers from bypassing the registry access provider, another through the registry can flexibly change the authorization without modification or upgrade provider
You can turn on token authentication globally:
&amp;lt;!--Random token , generated using a UUID--&amp;gt; &amp;lt;dubbo:provider interface=&amp;#34;com.foo.BarService&amp;#34; token=&amp;#34;true&amp;#34; /&amp;gt; or
&amp;lt;!--Fixed token, equivalent to the password--&amp;gt; &amp;lt;dubbo:provider interface=&amp;#34;com.foo.BarService&amp;#34; token=&amp;#34;123456&amp;#34; /&amp;gt; Of course can turn on token authentication at service level:</description>
    </item>
    
    <item>
      <title>Routing Rule</title>
      <link>/docs/v2.7/user/examples/routing-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/routing-rule/</guid>
      <description>The routing rules 1 determine the target server of one service call. It has two kinds of routing rules: conditional routing rules and script routing rules. It also support extension2.
Write Routing Rules Writing routing rules to the registry is usually done by the monitoring center or the console page.
RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;route://0.0.0.0/com.foo.BarService?category=routers&amp;amp;dynamic=false&amp;amp;rule=&amp;#34; + URL.encode(&amp;#34;host = 10.20.153.10 =&amp;gt; host = 10.20.153.11&amp;#34;))); 其中：
 route:// It indicates the type of routing rules, supports routing rules and script routing rules, and can be extended.</description>
    </item>
    
    <item>
      <title>Configure rule</title>
      <link>/docs/v2.7/user/examples/config-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/config-rule/</guid>
      <description>Write then dynamic configuration to the registry center,This feature is usually done by the monitoring center or the center&amp;rsquo;s page.
RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;override://0.0.0.0/com.foo.BarService?category=configurators&amp;amp;dynamic=false&amp;amp;application=foo&amp;amp;timeout=1000&amp;#34;)); In the config override url：
 override:// Indicates that the data is overwritten,support override and absent，can extends，Required. 0.0.0.0 Indicates that the configurations is valid for all IP addresses，If only want to overwritten specified ip data,you can replace that specified ip address.Required. com.</description>
    </item>
    
    <item>
      <title>Service Downgrade</title>
      <link>/docs/v2.7/user/examples/service-downgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/service-downgrade/</guid>
      <description>You can temporarily shield a non-critical service through the service downgrade and define the return policy for it.
Publish dynamic configuration rule to the registry:
RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;override://0.0.0.0/com.foo.BarService?category=configurators&amp;amp;dynamic=false&amp;amp;application=foo&amp;amp;mock=force:return+null&amp;#34;));   The configuration mock=force:return+null means that all calls of this service will return null value directly,without making remote calls.Usually used to reduce the effect of some slow non-critical services.
  Also you can change that configuration to mock=fail:return+null.</description>
    </item>
    
    <item>
      <title>Graceful Shutdown</title>
      <link>/docs/v2.7/user/examples/graceful-shutdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/graceful-shutdown/</guid>
      <description>Dubbo is graceful shutdown through the ShutdownHook of the JDK, so graceful shutdowns are not performed if you force shutdown the command, such as kill -9 PID, and will only be executed if kill PID is passed.
Howto Service provider  When stop, first marked as not receiving new requests, the new request directly return the error, so that the client retries other machines. Then check thread pool thread is running, if any, waiting for all threads to complete execution, unless overtime, then forced to close.</description>
    </item>
    
    <item>
      <title>Hostname Binding</title>
      <link>/docs/v2.7/user/examples/hostname-binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/hostname-binding/</guid>
      <description>Lookup order Default host IP lookup order：
 Get local address via LocalHost.getLocalHost(). If it is 127. * loopback address, then scan the network for host IP  Host configuration Registered address if it is not correct, such as the need to register public address, you can do this:
  edit /etc/hosts : add machinename and public ip, such as:
test1 205.182.23.201   in dubbo.xml add host address configuration:</description>
    </item>
    
    <item>
      <title>Logger Strategy</title>
      <link>/docs/v2.7/user/examples/logger-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/logger-strategy/</guid>
      <description>2.2.1 or later, dubbo support log4j、slf4j、jcl、jdk adapters 1, you can also explicitly configure the log output policy in the following ways:
  Command
java -Ddubbo.application.logger=log4j   Configure in dubbo.properties
dubbo.application.logger=log4j   Configure in dubbo.xml
&amp;lt;dubbo:application logger=&amp;#34;log4j&amp;#34; /&amp;gt;     Custom Extensions: logger-adapter &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>Access Log</title>
      <link>/docs/v2.7/user/examples/accesslog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/accesslog/</guid>
      <description>If you want to log the access information for each provide service,you can turn on the accesslog switch,which like the access log of Apache.
WarningThe size of the access log maybe too much,please check the disk capacity. Now I will show you how to config the access log.Logging by logging framework &amp;lt;dubbo:protocol accesslog=&amp;#34;true&amp;#34; .../&amp;gt; The above configuration will turn on accesslog switch for all provide services,and logging the access log with logging framework(log4j/logback/slf4j&amp;hellip;).</description>
    </item>
    
    <item>
      <title>Service Container</title>
      <link>/docs/v2.7/user/examples/service-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/service-container/</guid>
      <description>The service container is a standalone launcher because the backend service does not require the functionality of a Web container ,such as Tomcat or JBoss. If you insist on using web containers to load service providers, that increase complexity and is waste of resources.
The service container is just a simple Main method and loads a simple Spring container to expose the service.
The content of Service container can be extended, built-in spring, jetty, log4j etc.</description>
    </item>
    
    <item>
      <title>ReferenceConfig Cache</title>
      <link>/docs/v2.7/user/examples/reference-config-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/reference-config-cache/</guid>
      <description>The instance of ReferenceConfig is heavy. It encapsulates the connection to the registry and the connection to the provider, so it need to be cached. Otherwise, repeatedly generating ReferenceConfig may cause performance problems , memory and connection leaks. This problem is easy to ignored when programming in API mode.
Therefore, since 2.4.0, dubbo provides a simple utility ReferenceConfigCache for caching instances of ReferenceConfig.
Use as follows：
ReferenceConfig&amp;lt;XxxService&amp;gt; reference = new ReferenceConfig&amp;lt;XxxService&amp;gt;(); reference.</description>
    </item>
    
    <item>
      <title>Register Only</title>
      <link>/docs/v2.7/user/examples/registry-only/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/registry-only/</guid>
      <description>You have two mirroring environments, two registries. You have deployed one service at only one of the registries, another registries have not had time to deploy, and other applications at both registries need to rely on the service. At this time, the service provider registers service to another registrar, but the service consumers do not consume the service from another registrar.
Disable subscription configuration
&amp;lt;dubbo:registry id=&amp;#34;hzRegistry&amp;#34; address=&amp;#34;10.20.153.10:9090&amp;#34; /&amp;gt; &amp;lt;dubbo:registry id=&amp;#34;qdRegistry&amp;#34; address=&amp;#34;10.</description>
    </item>
    
    <item>
      <title>Distributed transaction</title>
      <link>/docs/v2.7/user/examples/distributed-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/distributed-transaction/</guid>
      <description>Distributed transactions are based on the JTA / XA specification(this feature has not yet been implemented)
Two-phase commit:
In Dubbo, Seate can be used to support distributed transactions.</description>
    </item>
    
    <item>
      <title>Thread Dump</title>
      <link>/docs/v2.7/user/examples/dump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/dump/</guid>
      <description>When the business thread pool is full, we need to know what resources/conditions are waiting for the thread , to find the bottleneck point of the system or abnormal point. dubbo automatically export thread stack through Jstack to keep the scene for easy to troubleshoot the problem.
Default policy:
 Export file path，user.home directory Export interval，The shortest interval allows you to export every 10 minutes  Specified export file path:</description>
    </item>
    
    <item>
      <title>Netty4</title>
      <link>/docs/v2.7/user/examples/netty4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/netty4/</guid>
      <description>Add support for netty4 communication module in 2.5.6 version of dubbo, enabled as follows:
provider：
&amp;lt;dubbo:protocol server=&amp;#34;netty4&amp;#34; /&amp;gt; or
&amp;lt;dubbo:provider server=&amp;#34;netty4&amp;#34; /&amp;gt; consumer：
&amp;lt;dubbo:consumer client=&amp;#34;netty4&amp;#34; /&amp;gt; Warning  If provider need to use different communication layer framework for different protocols , please configure multiple protocols separately.
  consumer configuration as follow：
&amp;lt;dubbo:consumer client=&amp;#34;netty&amp;#34;&amp;gt; &amp;lt;dubbo:reference /&amp;gt; &amp;lt;/dubbo:consumer&amp;gt; &amp;lt;dubbo:consumer client=&amp;#34;netty4&amp;#34;&amp;gt; &amp;lt;dubbo:reference /&amp;gt; &amp;lt;/dubbo:consumer&amp;gt;   Next we will continue to do something：We will provide a reference data on the performance test indicators and performance test comparison with the version of netty 3.</description>
    </item>
    
    <item>
      <title>Serialization</title>
      <link>/docs/v2.7/user/examples/serialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/v2.7/user/examples/serialization/</guid>
      <description>Using Kryo and FST is very simple, just add an attribute to the dubbo RPC XML configurition:
&amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; serialization=&amp;#34;kryo&amp;#34;/&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; serialization=&amp;#34;fst&amp;#34;/&amp;gt; Register serialized class For releasing the high ability of Kryo and FST, it&amp;rsquo;s best to register the classes that need serializing into the dubbo system. For example, we can implement the following callback interface:
public class SerializationOptimizerImpl implements SerializationOptimizer { public Collection&amp;lt;Class&amp;gt; getSerializableClasses() { List&amp;lt;Class&amp;gt; classes = new LinkedList&amp;lt;Class&amp;gt;(); classes.</description>
    </item>
    
    <item>
      <title>Past Releases</title>
      <link>/blog/2020/05/18/past-releases/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/05/18/past-releases/</guid>
      <description>Verification you can follow these procedures and the KEYS file to verify the download files
Apache Dubbo  GitHub: https://github.com/apache/dubbo
Release Notes: https://github.com/apache/dubbo/releases
 2.7.7 (2020-05-18)  source | asc | sha512  2.7.5 (2019-12-29)  source | asc | sha512  2.7.4.1 (2019-10-27)  source | asc | sha512  2.7.4 (2019-10-19)  source | asc | sha512  2.7.3 (2019-07-19)  source | asc | sha512  2.7.2 (2019-06-06)  source | asc | sha512  2.</description>
    </item>
    
    <item>
      <title>Dubbo Admin service test</title>
      <link>/blog/2019/08/26/service-test/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/08/26/service-test/</guid>
      <description>Based on the metadata of Dubbo2.7, Dubbo Admin implements the service test function, which can call the real service provider on the console through generalized call.
Usage   Deploy the provider: You can download the demo here. This project is based on Spring Boot, which is convenient to start in the IDE or command line. For service testing, you only need to start dubbo-basic-provider.
  Service-seeking: After completing the server deployment, you can query the corresponding service on the Dubbo Admin&amp;rsquo;s service test page: the information here is similar to the metadata, including the method name, parameter type and return value.</description>
    </item>
    
    <item>
      <title>Tracing Dubbo service with Apache Skywalking</title>
      <link>/blog/2019/08/11/tracing-dubbo-service-with-apache-skywalking/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/08/11/tracing-dubbo-service-with-apache-skywalking/</guid>
      <description>Introduction to Apache Skywalking Apache Skywalking is the APM system that it designed for micro-services architectures and cloud native architecture systems and supports distribute tracking. Apache skywalking (incubator) collects and analyzes the trace data and generates the relationship between the application and the service metric, Apache skywalking supports multiple languages agent, for example Java,.net core,Node.js and Go.
Currently, Skywalking has supported analysis the operation of distributed systems from 6 visual dimensions.</description>
    </item>
    
    <item>
      <title>Dubbo extensible mechanism source code analysis - part 2</title>
      <link>/blog/2019/05/02/dubbo-extensible-mechanism-source-code-analysis-part-2/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/05/02/dubbo-extensible-mechanism-source-code-analysis-part-2/</guid>
      <description>In the actual implementation of the Dubbo extensibility mechanism, we learned some concepts of the Dubbo extension mechanism, explored the implementation of LoadBalance in Dubbo, and implemented a LoadBalance on our own. Do you think Dubbo&amp;rsquo;s extension mechanism is great? Next, we will go deep into the source code of Dubbo and see what it is.
ExtensionLoader ExtensionLoader is the core class, which is responsible for the loading and lifecycle management of extension points.</description>
    </item>
    
    <item>
      <title>Dubbo extensible mechanism source code analysis - part 1</title>
      <link>/blog/2019/04/25/dubbo-extensible-mechanism-source-code-analysis-part-1/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/25/dubbo-extensible-mechanism-source-code-analysis-part-1/</guid>
      <description>1. Extension Mechanism of Dubbo Dubbo is claimed as a high-performance RPC framework on its official website. Today, I want to talk about another great specialty of Dubbo &amp;mdash; its scalability. As quote: Rome wasn’t built in a day. Any successful system always starts as a prototype. It is impossible to design a perfect system at the beginning. Instead, we should focus on true demand and keep improving the system. On the coding side, it requires us to pay attention on abstraction layers and high-level isolation.</description>
    </item>
    
    <item>
      <title>Implementation background and practice of Dubbo client asynchronous interface</title>
      <link>/blog/2019/02/20/implementation-background-and-practice-of-dubbo-client-asynchronous-interface/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/02/20/implementation-background-and-practice-of-dubbo-client-asynchronous-interface/</guid>
      <description>Preface Let&amp;rsquo;s start with a brief introduction about the stages of a complete Dubbo invocation.
  Biz~ represents business thread, that is, the thread where the business logic is located. Biz~ thread pool may be created and maintained by business itself, most of which may be managed by system framework itself (for example, a web system runs under Tomcat container, Biz~ thread is maintained by Tomcat); IO~ stands for network data processing thread, which is created and maintained by IO framework (such as Netty, Grizzly).</description>
    </item>
    
    <item>
      <title>Implementation background and practice of Dubbo server asynchronous interface</title>
      <link>/blog/2019/02/20/implementation-background-and-practice-of-dubbo-server-asynchronous-interface/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/02/20/implementation-background-and-practice-of-dubbo-server-asynchronous-interface/</guid>
      <description>Preface It is suggested to make an understanding of the thread phase involved in the process of Dubbo first, please refer to Implementation background and practice of Dubbo client asynchronous interface for details.
Implementation background It is necessary to introduce the server-side thread strategy in more detail to deepen the user&amp;rsquo;s judgment basis for selecting server-side asynchrony. It is also necessary to introduce coroutines, the &amp;ldquo;secret weapon&amp;rdquo; often used in server-side asynchrony.</description>
    </item>
    
    <item>
      <title>How to use Seata to ensure consistency between Dubbo Microservices</title>
      <link>/blog/2019/01/17/how-to-use-seata-to-ensure-consistency-between-dubbo-microservices/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/01/17/how-to-use-seata-to-ensure-consistency-between-dubbo-microservices/</guid>
      <description>Use case A business logic for user purchasing commodities. The whole business logic is powered by 3 microservices:
 Storage service: deduct storage count on given commodity. Order service: create order according to purchase request. Account service: debit the balance of user&amp;rsquo;s account.  Architecture StorageService public interface StorageService { /** * deduct storage count */ void deduct(String commodityCode, int count); } OrderService public interface OrderService { /** * create order */ Order create(String userId, String commodityCode, int orderCount); } AccountService public interface AccountService { /** * debit balance of user&amp;#39;s account */ void debit(String userId, int money); } Main business logic public class BusinessServiceImpl implements BusinessService { private StorageService storageService; private OrderService orderService; /** * purchase */ public void purchase(String userId, String commodityCode, int orderCount) { storageService.</description>
    </item>
    
    <item>
      <title>The fifth Dubbo meetup has been held in Hangzhou</title>
      <link>/blog/2018/12/10/the-fifth-dubbo-meetup-has-been-held-in-hangzhou/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/12/10/the-fifth-dubbo-meetup-has-been-held-in-hangzhou/</guid>
      <description>The fifth Dubbo meetup has been held in Hangzhou,
Please enjoy the slides of the topics:
 Ding Li: How to involve in dubbo community slides Shenli Cao: Dubbo 2.7 introduction slides Tao Yang: Dubbo practice in netease koala slides Mercy Ma: Nacos support in Dubbo slides Yihao Zhao: Sentinel: Sentinel support for Dubbo slides Zhixuan Chen: Troubleshooting Dubbo with Arthas slides  </description>
    </item>
    
    <item>
      <title>Dubbo Integrates with Nacos to Become a Registry</title>
      <link>/blog/2018/11/07/dubbo-integrates-with-nacos-to-become-a-registry/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/11/07/dubbo-integrates-with-nacos-to-become-a-registry/</guid>
      <description>Nacos is an important registry in Dubbo ecosystem, and dubbo-registry-nacos is the implementation of Dubbo-integrated Nacos registry.
Preparation Works Before you integrate dubbo-registry-nacos into your Dubbo project, make sure the Nacos service is started in the background. If you are not familiar with the basic use of Nacos, you can refer to the Quick Start for Nacos: https://nacos.io/en-us/docs/quick-start.html. Nacos versions above 0.6.1 are recommended.
Get Started Quickly The operation steps for Dubbo to integrate Nacos into a registry are simple, the general steps can be divided into &amp;ldquo;add Maven dependency&amp;rdquo; and &amp;ldquo;configure the registry.</description>
    </item>
    
    <item>
      <title>Introduction to the Dubbo protocol</title>
      <link>/blog/2018/10/05/introduction-to-the-dubbo-protocol/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/10/05/introduction-to-the-dubbo-protocol/</guid>
      <description>The concept of the protocol The protocol is the foundation of communication between two network entities, and data is transmitted from one entity to another in the form of a byte stream over the network. In the world of byte streams, this one-dimensional byte stream cannot be reshaped into two-dimensional or multi-dimensional data structures and domain objects without a protocol.
What is the protocol The protocol is the semantics determined by both parties for the communication.</description>
    </item>
    
    <item>
      <title>Integrate Dubbo with Kubernetes</title>
      <link>/blog/2018/09/30/integrate-dubbo-with-kubernetes/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/09/30/integrate-dubbo-with-kubernetes/</guid>
      <description>General goal Dubbo&amp;rsquo;s provider don&amp;rsquo;t care about service registration.Open its Dubbo service port,the declaration and publishment of the service will be executed by Kubernetes. Dubbo&amp;rsquo;s consumer directly discovers the corresponding service endpoints of Kubernetes during service discovery procedure, thereby reusing Dubbo&amp;rsquo;s existing microservice channel capabilities.The benefit is that there is no need to rely on any third-party soft-loaded registry and it can be seamlessly integrated into the multi-tenant security system of Kubernetes.</description>
    </item>
    
    <item>
      <title>How to prepare an Apache Release</title>
      <link>/blog/2018/09/02/how-to-prepare-an-apache-release/</link>
      <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/09/02/how-to-prepare-an-apache-release/</guid>
      <description>Understanding the Apache Release Cycle In general, Source Release is the key and the required content of Apache. But Binary Release is optional, Dubbo can choose whether to release binary packages to the Apache repository or to the Maven central repository.
Please refer to the following links for more information on ASF&amp;rsquo;s release guide:
 Apache Release Guide Apache Release Policy Maven Release Info  Preparation of Local Building Environment Mainly including the related preparation of signature utilities and Maven repository certification</description>
    </item>
    
    <item>
      <title>How to implement a fully asynchronous calls chain based on Dubbo</title>
      <link>/blog/2018/09/02/how-to-implement-a-fully-asynchronous-calls-chain-based-on-dubbo/</link>
      <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/09/02/how-to-implement-a-fully-asynchronous-calls-chain-based-on-dubbo/</guid>
      <description>Implementing the full asynchronous programming based on Dubbo, which is a new feature introduced in version 2.7.0 after the enhancement of the existing asynchronous mode.This article first reviews the supported functions and existing problems of asynchronization in 2.6.x and earlier versions, and introduces the targeted enhancements based on CompletableFuture in version 2.7.0. Then, the use of enhanced asynchronous programming is elaborated through several examples. Finally, it summarizes the new problems brought by the introduction of asynchronous mode and corresponding solutions from Dubbo.</description>
    </item>
    
    <item>
      <title>The fourth Dubbo meetup has been held in Chengdu</title>
      <link>/blog/2018/08/26/the-fourth-dubbo-meetup-has-been-held-in-chengdu/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/26/the-fourth-dubbo-meetup-has-been-held-in-chengdu/</guid>
      <description>The fourth Dubbo meetup has been held in Chengdu The depth of the user communication On August 26, 10:00 am - 12:00am, invited the arrival of the car to help, cloud gold, former BBD, flying fish star four companies open source enthusiasts and heavy users participate in face-to-face communication;According to the participants&#39; feedback, answer to Dubbo many doubt, especially how to participate in the contribution to the community, as well as code contribution value point.</description>
    </item>
    
    <item>
      <title> Dubbo Basic Usage - Dubbo Consumer Configuration</title>
      <link>/blog/2018/08/14/dubbo-basic-usage-dubbo-consumer-configuration/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/14/dubbo-basic-usage-dubbo-consumer-configuration/</guid>
      <description>Dubbo Consumer Configuration Consumer Configuration Detailed There are 3 ways to configure the Dubbo Consumer: XML configuration, API call mode configuration, and annotation mode configuration.
XML Configuration Example of the simplest configuration: &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; Xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; Xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; Xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema /dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;dubbo:application name=&amp;#34;hello-world-app&amp;#34; /&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;multicast://224.5.6.7:1234&amp;#34; /&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; port=&amp;#34;20880&amp;#34; /&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;demoServiceRemote&amp;#34; interface=&amp;#34;com.alibaba.dubbo.demo.DemoService&amp;#34; /&amp;gt; &amp;lt;/beans&amp;gt;  For the supported configuration tags and corresponding configuration items, refer to the usage in the provider.</description>
    </item>
    
    <item>
      <title>Dubbo: Several ways about synchronous/asynchronous invoke</title>
      <link>/blog/2018/08/14/dubbo-several-ways-about-synchronous/asynchronous-invoke/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/14/dubbo-several-ways-about-synchronous/asynchronous-invoke/</guid>
      <description>As we all know，Dubbo adopts a single large join protocol by default and takes the NIO asynchronous communication mechanism of Netty as the low-level implementation. Based on this mechanism, Dubbo implements several invocation modes as follows:
 synchronous invoke asynchronous invoke parameters callback event notification  Synchronous invoke Synchronous invoke is a kind of blocking invocation mode, that is the Consumer keeps blocking and waiting, until the Provider returns.
Generally, a typical synchronous invocation process is as follows:</description>
    </item>
    
    <item>
      <title>Dubbo Basic Usage -- Dubbo Provider Configuration</title>
      <link>/blog/2018/08/14/dubbo-basic-usage-dubbo-provider-configuration/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/14/dubbo-basic-usage-dubbo-provider-configuration/</guid>
      <description>This chapter mainly talking about how to configure dubbo. According to the configuration mode, it can be divided into the following mode: XML Configuration, Properties Configuration, Annotation Configuration, API Invocation Mode Configuration. And according to the function, we can divide them into Dubbo Provider and Dubbo Consumer. In the following sections, we would explain Dubbo Provider and Dubbo Consumer respectively.
Dubbo Provider Configuration Provider Configuration in Detail The configuration mode of Dubbo Provider has 4 different ways: XML Configuration, Properties Configuration, API Invocation Mode Configuration and Annotation Configuration.</description>
    </item>
    
    <item>
      <title>Manipulating Services Dynamically via QoS</title>
      <link>/blog/2018/08/14/manipulating-services-dynamically-via-qos/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/14/manipulating-services-dynamically-via-qos/</guid>
      <description>Manipulating Services Dynamically via QoS QoS (short form of Quality of Service), is a common terminology talking about network devices. For example, by adjusting and manipulating the weights of ports of a router dynamically via QoS, engineers could give priority to services running on these ports and make sure these services&#39; quality and reliability.
In Dubbo, QoS is used to query and manipulate services dynamically, like getting a list of active provider and consumer services, and launching or withdrawing services (i.</description>
    </item>
    
    <item>
      <title>Source code analysis of spring-boot&#43;Dubbo App start and stop</title>
      <link>/blog/2018/08/14/source-code-analysis-of-spring-boot-dubbo-app-start-and-stop/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/14/source-code-analysis-of-spring-boot-dubbo-app-start-and-stop/</guid>
      <description>Introduction Dubbo Spring Boot project is dedicated to simplifying the development of the Dubbo RPC framework in the Spring Boot application. It also integrates the feature of Spring Boot:
 Autoconfigure (ex: Annotation driver, Autoconfigure, etc.) Production-Ready (ex: Security, Healthy check, Externalize configuration, etc.)  The analysis of DubboConsumer startup Have you ever thought about this : since the DubboConsumerDemo application in dubbo-spring-boot-project has only one line of code, why not just exit directly when the main method is executed?</description>
    </item>
    
    <item>
      <title>Implementation of cross-language calls by Dubbo2.js</title>
      <link>/blog/2018/08/14/implementation-of-cross-language-calls-by-dubbo2.js/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/14/implementation-of-cross-language-calls-by-dubbo2.js/</guid>
      <description>dubbo2.js is a Dubbo client for node.js developped by Qianmiwang. It supports Dubbo&amp;rsquo;s native protocol, which makes the RPC calls between javascript and java efficient and agile. This tool has been contributed to Dubbo&amp;rsquo;s community.
 Cross-language calls for micro service Nowadays, Internet architecture tends to be micro-service way. The discussions about micro-service architecture becomes the most mentioned topic in different technical conferences. In China, most of the companies, such as Qianmiwang, choose Dubbo as their micro-servie architecture solution.</description>
    </item>
    
    <item>
      <title>Generic invoke of Dubbo</title>
      <link>/blog/2018/08/14/generic-invoke-of-dubbo/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/14/generic-invoke-of-dubbo/</guid>
      <description>Generic invoke of Dubbo The generic invoke could be considered to be used in the following cases:
 Service test platform API service gateway  The generic invoke is mainly used when the consumer does not have an API interface; instead of depending the interface jar package, the service call is initiated directly through the GenericService interface, and all POJOs in the parameters and return values are represented by a Map.</description>
    </item>
    
    <item>
      <title>Dubbo&#39;s Load Balance</title>
      <link>/blog/2018/08/10/dubbos-load-balance/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/10/dubbos-load-balance/</guid>
      <description>Background Dubbo is a distributed service framework that avoids single point of failure and horizontal expansion of support services. A service typically deploys multiple instances. How to select a call from a cluster of multiple service providers involves a load balancing strategy.
Concepts Before discussing load balancing, I will explain these three concepts first.
 Load Balancing Fault-tolerant Cluster Service Route  These three concepts are confusing. They all describe how to choose from multiple Providers to make calls.</description>
    </item>
    
    <item>
      <title>Use Annotations In Dubbo</title>
      <link>/blog/2018/08/07/use-annotations-in-dubbo/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/07/use-annotations-in-dubbo/</guid>
      <description>With the widely promotion and implementation of Microservices Architecture, the Microservices Architecture represented by Spring Boot and Spring Cloud, in Java ecosystem, introduced some brand new programming model, like:
 Annotation-Driven External Configuration Auto-Configure  New programming model have some advantages, for example, it does not require XML configuration, it can simplify deployment process, beyond that，it can promote development efficiency. In order to implement the microservice architecture better，Dubbo has provided more perfect support for the above three scenarios since version 2.</description>
    </item>
    
    <item>
      <title>Using Zookeeper in Dubbo</title>
      <link>/blog/2018/08/07/using-zookeeper-in-dubbo/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/07/using-zookeeper-in-dubbo/</guid>
      <description>Introduction of Zookeeper The basic concept In the mordern distrbuted applications, there are multiple coordination problems between nodes and nodes, including: leader election, group service, locking, configuration management, naming and synchronization. Apache Zookeeper, as its name implied, is a distributed, open-source coordination service framwork to address these demand.
In order to ensure the high performance, highly available and strictly ordered access, the performance aspects of ZooKeeper means it can be used in large, distributed systems and can also be deployed in cluster mode, which called &amp;lsquo;ZooKeeper ensemble&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Your First Dubbo Demo</title>
      <link>/blog/2018/08/07/dubbo-101/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/07/dubbo-101/</guid>
      <description>Java RMI Introduction Java RMI (Remote Method Invocation) is a mechanism that allows users to access or invocate an object and a method running on another JVM (Java Virtual Machine). RMI is an implementation of RPC (Remote Procedure Call) in java with support of OOP (Object Oriented Paradigms). Instead of bothering IDL (Interface Define Language), users can build distributed applications by depending on interfaces in an easy and natural way.</description>
    </item>
    
    <item>
      <title>The third Dubbo meetup has been held in Shenzhen</title>
      <link>/blog/2018/07/30/the-third-dubbo-meetup-has-been-held-in-shenzhen/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07/30/the-third-dubbo-meetup-has-been-held-in-shenzhen/</guid>
      <description>The third Dubbo meetup has successfully been held in Shenzhen, over 2000 people submitted registration, and over 700 were present, more than 17,000 watched the live online.
Please enjoy the slides of the topics:
 Zhixuan Chen: Dubbo-present-and-2.7-update (Chinese) slides Bin Kang: Microservice-in-lexinfintech (Chinese) slides Jialiang lin: sentinel (Chinese) slides  </description>
    </item>
    
    <item>
      <title>Sentinel: The flow sentinel of Dubbo services</title>
      <link>/blog/2018/07/27/sentinel-the-flow-sentinel-of-dubbo-services/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07/27/sentinel-the-flow-sentinel-of-dubbo-services/</guid>
      <description>In large clusters there may be thousands of Dubbo service instances in production, with continuous traffic coming in. However, in distributed systems, some services may be unavailable due to various of failure such as traffic surge, high system load, and network latency. If no control actions are performed, this may cause cascading failure, affecting the availability of the service. So we need a powerful library - Sentinel, which can guarantee the stability of the service, to protect the Dubbo service.</description>
    </item>
    
    <item>
      <title>Tracking with Pinpoint</title>
      <link>/blog/2018/07/12/tracking-with-pinpoint/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07/12/tracking-with-pinpoint/</guid>
      <description>After using Dubbo to serve or integrate applications, assuming that a service backstage log shows an exception and that the service is invoked by multiple applications, it is often difficult to determine which application is called, and what is the cause of the problem, so we need a set of distributed tracking systems to quickly locate the problem. Pinpoint can help us quickly locate problems (of course, there are more than one solution).</description>
    </item>
    
    <item>
      <title>Your First Dubbo Filter</title>
      <link>/blog/2018/07/01/your-first-dubbo-filter/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07/01/your-first-dubbo-filter/</guid>
      <description>Overview In overall design of Dubbo, Filter is a very important concept, most of Dubbo&amp;rsquo;s functions are based on this extension point, and the Filter interception will be executed during each call.
Extension Mechanism of Dubbo Filter There are already about 20 Filters implemented in Dubbo. Their entry is ProtocolFilterWrapper, ProtocolFilterWrapper makes a Wrapper on Protocol and will be loaded when the extension is loaded. Then, let&amp;rsquo;s see how the Filter chain is constructed.</description>
    </item>
    
    <item>
      <title>The second Dubbo Shanghai meetup has been held successfully</title>
      <link>/blog/2018/06/23/the-second-dubbo-shanghai-meetup-has-been-held-successfully/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/06/23/the-second-dubbo-shanghai-meetup-has-been-held-successfully/</guid>
      <description>The sencond Dubbo meetup has successfully been held in Shanghai, over 700 people submitted registration, and over 300 were present, more than 10,000 watched the live online.
Please enjoy the slides of the topics:
 Jerrick Zhu: Dubbo Status and Roadmap (Chinese) slides Mercy Ma: Dubbo Cloud Native Practices and Thoughts (Chinese) slides Ping Guo: Nacos Open Source Initiative (Chinese) slides Zhiwei Pan: Dubbo Practices on Internet Finance Industries (Chinese) slides  </description>
    </item>
    
    <item>
      <title>The first Dubbo meetup has been held in Beijing</title>
      <link>/blog/2018/05/12/the-first-dubbo-meetup-has-been-held-in-beijing/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/05/12/the-first-dubbo-meetup-has-been-held-in-beijing/</guid>
      <description>The first Dubbo meetup has successfully been held in Beijing, over 400+ people were present. What a great event!
Please enjoy the slides of the topics:
 Ian Luo: Dubbo&amp;rsquo;s present and future (Chinese) slides Jun Liu: Introduction to the 4th Aliware Performance Challenge (Chinese) slides Zhixuan Chen: Quickly building Microservice with Dubbo and Spring-boot (Chinese) slides Xin Wang: Dubbo and Weidian&amp;rsquo;s Practice on Microservice Architecture (Chinese) slides  </description>
    </item>
    
    <item>
      <title>The ApacheCon NA schedule has been announced</title>
      <link>/blog/2018/05/02/the-apachecon-na-schedule-has-been-announced/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/05/02/the-apachecon-na-schedule-has-been-announced/</guid>
      <description>Ian Luo(PMC) and Jun Liu(PMC) will talk about &amp;ldquo;Introducing Apache Dubbo(Incubating): What is Dubbo and How it Works&amp;rdquo; at ApacheCon NA this year in Montréal! Please check out the schedule here and register here.</description>
    </item>
    
    <item>
      <title>The GSoC(Google Summer of Code) 2018</title>
      <link>/blog/2018/04/25/the-gsocgoogle-summer-of-code-2018/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/04/25/the-gsocgoogle-summer-of-code-2018/</guid>
      <description>The GSoC(Google Summer of Code) 2018 projects has been announced, Raghu Reddy&amp;rsquo;s project &amp;ldquo;Extending Serialization protocols support for Apache Dubbo&amp;rdquo; has been accepted! Congratulations!</description>
    </item>
    
    <item>
      <title>Dubbo roadmap is announced in QCon Beijing 2018</title>
      <link>/blog/2018/04/22/dubbo-roadmap-is-announced-in-qcon-beijing-2018/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/04/22/dubbo-roadmap-is-announced-in-qcon-beijing-2018/</guid>
      <description>Ian Luo has delivered a great talk at QCon Beijing 2018, where the roadmap of Dubbo has also be announced. Please enjoy the slides!</description>
    </item>
    
  </channel>
</rss>
